<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<!-- Global remote parent pom.xml -->
	<!-- https://github.com/random-maven/arkon -->

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.carrotgarden.a</groupId>
    <artifactId>carrot-a</artifactId>
    <version>0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <url>http://www.carrotgarden.com/</url>
    <name>${project.artifactId}</name>
    <description>${project.artifactId}</description>

    <organization><!-- -->
        <name>CarrotGarden</name>
        <url>http://www.carrotgarden.com/</url>
    </organization>

    <developers>
        <developer>
            <name>${project.organization.name}</name>
        </developer>
    </developers>

    <scm>
        <url>${project.url}</url>
    </scm>

    <properties>

		<!-- Default encoding. -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Default versions. -->
        <version.java>1.8</version.java>
        <version.maven>3.5.3</version.maven><!-- Sync to M2E. -->
        <version.jackson>2.9.8</version.jackson>
        <version.slf4j>1.7.26</version.slf4j>
        <version.tycho>1.4.0</version.tycho>
        <version.groovy>2.6.0</version.groovy>
        <version.jmh>1.21</version.jmh>
        <version.sbe>1.12.5</version.sbe>
        <version.agrona>1.0.0</version.agrona>
        <version.protobuf>3.7.1</version.protobuf>
        <version.snappy>1.1.7.3</version.snappy>
        <version.lucene>8.1.0</version.lucene>
        <version.amazon.sdk>1.11.550</version.amazon.sdk>
        <version.sigar>1.6.5.132</version.sigar>
        <version.aspectj>1.9.4</version.aspectj>
        <version.bouncy>1.61</version.bouncy>

		<!-- Scala stack. -->
        <version.scala.epoch>2.12</version.scala.epoch>
        <version.scala.release>2.12.8</version.scala.release>
        <version.scala.sbt>0.13.7</version.scala.sbt>
        <version.scala.xml>1.2.0</version.scala.xml>
        <version.scala.protobuf>0.6.7</version.scala.protobuf>
        <version.akka.main>2.5.22</version.akka.main>
        <version.akka.http>10.1.8</version.akka.http>
        <version.eventuate>0.8.1</version.eventuate>
        <version.play>2.8.2</version.play>
        <version.scala.buff>1.4.0</version.scala.buff>
        <version.scala.mock>3.6.0</version.scala.mock>
        <version.specs2>4.5.1</version.specs2>
        <version.scalaz>7.3.0-M18</version.scalaz>
        <version.kamon>1.2.0</version.kamon>
        <version.scalatest>3.0.7</version.scalatest>
        <version.scalacheck>1.14.0</version.scalacheck>
        <version.scala.meta>3.7.4</version.scala.meta>
        <version.scala.plugin.meta>3.0.0-M11</version.scala.plugin.meta>
        <version.scala.plugin.macro>2.1.1</version.scala.plugin.macro>
        <version.scala.zinc>1.2.5</version.scala.zinc>

		<!-- Scala.js stack. -->
        <version.scalajs.epoch>0.6</version.scalajs.epoch>
        <version.scalajs.release>0.6.27</version.scalajs.release>
        <version.scalajs.library>sjs${version.scalajs.epoch}_${version.scala.epoch}</version.scalajs.library>
        <version.scalajs.scalacss>0.5.6</version.scalajs.scalacss>
        <version.scalajs.scalatags>0.6.8</version.scalajs.scalatags>
        <version.scalajs.autowire>0.2.6</version.scalajs.autowire>
        <version.scalajs.prickle>1.1.14</version.scalajs.prickle>
        <version.scalajs.upickle>0.6.6</version.scalajs.upickle>
        <version.scalajs.scalarx>0.4.0</version.scalajs.scalarx>
        <version.scalajs.utest>0.6.7</version.scalajs.utest>
        <version.scala.plugin.javascript>${version.scalajs.release}</version.scala.plugin.javascript>

		<!-- Scala.native stack. -->
        <version.scalanat.epoch>0.3</version.scalanat.epoch>
        <version.scalanat.release>0.3.7</version.scalanat.release>
        <version.scalanat.library>native${version.scalanat.epoch}_${version.scala.epoch}</version.scalanat.library>
        <version.scala.plugin.native>${version.scalanat.release}</version.scala.plugin.native>

		<!-- JUnit Testing -->
        <version.junit.legacy>4.12</version.junit.legacy>
        <version.junit.platform>1.3.2</version.junit.platform>
        <version.junit.jupiter>5.4.2</version.junit.jupiter>
        <version.junit.vintage>5.4.2</version.junit.vintage>

		<!-- Maven plugins. -->
        <version.maven.scm>1.11.2</version.maven.scm>
        <version.maven.javadoc>3.1.0</version.maven.javadoc>
        <version.maven.testing>2.22.2</version.maven.testing>

		<!-- Database providers. -->
        <version.slick>3.3.0</version.slick>
        <version.hikari>3.3.1</version.hikari>
        <version.postgres>42.2.5</version.postgres>

		<!-- Carrot Garden internal repository. -->
        <repo.amazon.public.host>public.maven.carrotgarden.com</repo.amazon.public.host>
        <repo.amazon.secret.host>secret.maven.carrotgarden.com</repo.amazon.secret.host>

		<!-- Carrot Garden external repository. -->
        <repo.sonatype.release.url>https://oss.sonatype.org/content/repositories/releases</repo.sonatype.release.url>
        <repo.sonatype.snapshots.url>https://oss.sonatype.org/content/repositories/snapshots</repo.sonatype.snapshots.url>
        <repo.sonatype.deployment.url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</repo.sonatype.deployment.url>

		<!-- See maven-release-plugin. -->
        <release.profiles />
		<!-- <release.nested.args>-Dresume=false</release.nested.args> -->
        <release.goals.prepare>clean verify</release.goals.prepare>
        <release.goals.perform>deploy</release.goals.perform>

		<!-- See maven-compiler-plugin. -->
        <maven.compiler.source>${version.java}</maven.compiler.source>
        <maven.compiler.target>${version.java}</maven.compiler.target>

		<!-- Resource identity sequence. -->
        <maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>

		<!-- Streaming release version. -->
        <release.epoch>0</release.epoch>
        <release.stamp>${maven.build.timestamp}</release.stamp>
        <revision>${release.epoch}.${release.stamp}</revision>

    </properties>

    <dependencyManagement>
        <dependencies>

			<!-- Scala. -->
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${version.scala.release}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-reflect</artifactId>
                <version>${version.scala.release}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-compiler</artifactId>
                <version>${version.scala.release}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang.modules</groupId>
                <artifactId>scala-swing_${version.scala.epoch}</artifactId>
                <version>2.1.1</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang.modules</groupId>
                <artifactId>scala-parser-combinators_${version.scala.epoch}</artifactId>
                <version>1.1.2</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang.modules</groupId>
                <artifactId>scala-xml_${version.scala.epoch}</artifactId>
                <version>${version.scala.xml}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang.modules</groupId>
                <artifactId>scala-async_${version.scala.epoch}</artifactId>
                <version>0.10.0</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang.modules</groupId>
                <artifactId>scala-pickling_${version.scala.epoch}</artifactId>
                <version>0.11.0-M2</version>
            </dependency>

			<!-- Scala utils. -->
            <dependency>
                <groupId>com.jsuereth</groupId>
                <artifactId>scala-arm_${version.scala.epoch}</artifactId>
                <version>2.0</version>
            </dependency>
            <dependency>
                <groupId>org.scalautils</groupId>
                <artifactId>scalautils_${version.scala.epoch}</artifactId>
                <version>2.1.7</version>
            </dependency>
            <dependency>
                <groupId>com.github.pathikrit</groupId>
                <artifactId>better-files_${version.scala.epoch}</artifactId>
                <version>3.8.0</version>
            </dependency>
            <dependency>
                <groupId>com.github.pathikrit</groupId>
                <artifactId>better-files-akka_${version.scala.epoch}</artifactId>
                <version>3.6.0</version>
            </dependency>
            <dependency>
                <groupId>com.beachape.filemanagement</groupId>
                <artifactId>schwatcher_${version.scala.epoch}</artifactId>
                <version>0.3.5</version>
            </dependency>
            <dependency>
                <groupId>com.roundeights</groupId>
                <artifactId>hasher_${version.scala.epoch}</artifactId>
                <version>1.2.0</version>
            </dependency>

			<!-- Scala compiler support. -->
            <dependency><!-- plugin -->
                <groupId>org.scalameta</groupId>
                <artifactId>paradise_${version.scala.release}</artifactId>
                <version>${version.scala.plugin.meta}</version>
                <scope>provided</scope>
            </dependency>
            <dependency><!-- plugin -->
                <groupId>org.scalamacros</groupId>
                <artifactId>paradise_${version.scala.release}</artifactId>
                <version>${version.scala.plugin.macro}</version>
                <scope>provided</scope>
            </dependency>
            <dependency><!-- runtime -->
                <groupId>org.scalameta</groupId>
                <artifactId>scalameta_${version.scala.epoch}</artifactId>
                <version>${version.scala.meta}</version>
                <scope>provided</scope>
            </dependency>
            <dependency><!-- runtime -->
                <groupId>org.scalameta</groupId>
                <artifactId>contrib_${version.scala.epoch}</artifactId>
                <version>${version.scala.meta}</version>
                <scope>provided</scope>
            </dependency>
            <dependency><!-- runtime -->
                <groupId>com.lihaoyi</groupId>
                <artifactId>acyclic_${version.scala.epoch}</artifactId>
                <version>0.1.9</version>
                <scope>provided</scope>
            </dependency>
            <dependency><!-- runtime -->
                <groupId>org.scala-sbt</groupId>
                <artifactId>zinc_${version.scala.epoch}</artifactId>
                <version>${version.scala.zinc}</version>
                <scope>provided</scope>
            </dependency>
            <dependency><!-- runtime -->
                <groupId>org.scala-sbt</groupId>
                <artifactId>compiler-bridge_${version.scala.epoch}</artifactId>
                <version>${version.scala.zinc}</version>
                <scope>provided</scope>
            </dependency>

			<!-- Scala Logging. -->
            <dependency>
                <groupId>com.typesafe.scala-logging</groupId>
                <artifactId>scala-logging_${version.scala.epoch}</artifactId>
                <version>3.9.2</version>
            </dependency>

			<!-- Scala testing. -->
            <dependency>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest_${version.scala.epoch}</artifactId>
                <version>${version.scalatest}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.scalatest</groupId>
                <artifactId>scalatest_${version.scalajs.library}</artifactId>
                <version>${version.scalatest}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.scalacheck</groupId>
                <artifactId>scalacheck_${version.scala.epoch}</artifactId>
                <version>${version.scalacheck}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.scalacheck</groupId>
                <artifactId>scalacheck_${version.scalajs.library}</artifactId>
                <version>${version.scalacheck}</version>
                <scope>test</scope>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>org.scalamock</groupId>
                <artifactId>scalamock-core_${version.scala.epoch}</artifactId>
                <version>${version.scala.mock}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.scalamock</groupId>
                <artifactId>scalamock-scalatest-support_${version.scala.epoch}</artifactId>
                <version>${version.scala.mock}</version>
                <scope>test</scope>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>org.specs2</groupId>
                <artifactId>specs2-core_${version.scala.epoch}</artifactId>
                <version>${version.specs2}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.specs2</groupId>
                <artifactId>specs2-junit_${version.scala.epoch}</artifactId>
                <version>${version.specs2}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.specs2</groupId>
                <artifactId>specs2-mock_${version.scala.epoch}</artifactId>
                <version>${version.specs2}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.specs2</groupId>
                <artifactId>specs2-matcher-extra_${version.scala.epoch}</artifactId>
                <version>${version.specs2}</version>
                <scope>test</scope>
            </dependency>

			<!-- Scala JS/Facade. Scala-to-JS only facade. -->
            <dependency>
                <groupId>org.scala-js</groupId>
                <artifactId>scalajs-library_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.release}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.scala-js</groupId>
                <artifactId>scalajs-dom_${version.scalajs.library}</artifactId>
                <version>0.9.7</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>be.doeraene</groupId>
                <artifactId>scalajs-jquery_${version.scalajs.library}</artifactId>
                <version>0.9.4</version>
                <scope>provided</scope>
            </dependency>

			<!-- Scala JS/Dual. Scala + JS library. -->
            <dependency>
                <groupId>com.github.dwickern</groupId>
                <artifactId>scala-nameof_${version.scala.epoch}</artifactId>
                <version>1.0.3</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>com.github.dwickern</groupId>
                <artifactId>scala-nameof_${version.scalajs.library}</artifactId>
                <version>1.0.3</version>
                <scope>provided</scope>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>scalatags_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.scalatags}</version>
            </dependency>
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>scalatags_${version.scalajs.library}</artifactId>
                <version>${version.scalajs.scalatags}</version>
                <scope>provided</scope>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>autowire_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.autowire}</version>
            </dependency>
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>autowire_${version.scalajs.library}</artifactId>
                <version>${version.scalajs.autowire}</version>
                <scope>provided</scope>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>com.github.benhutchison</groupId>
                <artifactId>prickle_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.prickle}</version>
            </dependency>
            <dependency>
                <groupId>com.github.benhutchison</groupId>
                <artifactId>prickle_${version.scalajs.library}</artifactId>
                <version>${version.scalajs.prickle}</version>
                <scope>provided</scope>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>upickle_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.upickle}</version>
            </dependency>
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>upickle_${version.scalajs.library}</artifactId>
                <version>${version.scalajs.upickle}</version>
                <scope>provided</scope>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>scalarx_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.scalarx}</version>
            </dependency>
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>scalarx_${version.scalajs.library}</artifactId>
                <version>${version.scalajs.scalarx}</version>
                <scope>provided</scope>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>com.github.japgolly.scalacss</groupId>
                <artifactId>core_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.scalacss}</version>
            </dependency>
            <dependency>
                <groupId>com.github.japgolly.scalacss</groupId>
                <artifactId>core_${version.scalajs.library}</artifactId>
                <version>${version.scalajs.scalacss}</version>
                <scope>provided</scope>
            </dependency>

			<!-- Scala JS/Webjar. Resource resolver. -->
            <dependency>
                <groupId>org.webjars</groupId>
                <artifactId>webjars-locator-core</artifactId>
                <version>0.37</version>
            </dependency>

			<!-- Scala JS/Webjar. Web resources. Non-scala. -->
            <dependency>
                <groupId>org.webjars.bower</groupId>
                <artifactId>jquery</artifactId>
                <version>3.4.1</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.bower</groupId>
                <artifactId>popper.js</artifactId>
                <version>1.14.6</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.bower</groupId>
                <artifactId>bootstrap</artifactId>
                <version>4.3.1</version>
            </dependency>

			<!-- Scala JS/Webjar React stack. Non-scala -->
            <dependency>
                <groupId>org.webjars.npm</groupId>
                <artifactId>react</artifactId>
                <version>16.8.6</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.npm</groupId>
                <artifactId>react-dom</artifactId>
                <version>16.8.6</version>
            </dependency>

			<!-- Scala JS/Webjar Vue stack. Non-scala. -->
            <dependency>
                <groupId>org.webjars.bower</groupId>
                <artifactId>vue</artifactId>
                <version>2.6.9</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.bower</groupId>
                <artifactId>vue-router</artifactId>
                <version>3.0.1</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.bower</groupId>
                <artifactId>vuex</artifactId>
                <version>3.0.0</version>
            </dependency>
            <dependency>
                <groupId>org.webjars.npm</groupId>
                <artifactId>bootstrap-vue</artifactId>
                <version>2.0.0-rc.1</version>
                <exclusions>
                    <exclusion>
                        <groupId>*</groupId>
                        <artifactId>*</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

			<!-- Scala JS testing. -->
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>utest_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.utest}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.lihaoyi</groupId>
                <artifactId>utest_${version.scalajs.library}</artifactId>
                <version>${version.scalajs.utest}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.scala-js</groupId>
                <artifactId>scalajs-junit-test-plugin_${version.scala.release}</artifactId>
                <version>${version.scalajs.release}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.scala-js</groupId>
                <artifactId>scalajs-junit-test-runtime_${version.scala.epoch}</artifactId>
                <version>${version.scalajs.release}</version>
                <scope>test</scope>
            </dependency>

			<!-- Akka. -->
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-actor_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-agent_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-cluster_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-cluster-tools_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-contrib_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-kernel_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-multi-node-testkit_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-persistence_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-persistence-tck_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-remote_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-slf4j_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-testkit_${version.scala.epoch}</artifactId>
                <scope>test</scope>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-typed-experimental_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
                <exclusions>
                    <exclusion>
                        <groupId>com.typesafe.akka</groupId>
                        <artifactId>akka-testkit_${version.scala.epoch}</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-stream_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-stream-testkit_${version.scala.epoch}</artifactId>
                <version>${version.akka.main}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-http_${version.scala.epoch}</artifactId>
                <version>${version.akka.http}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-http-testkit_${version.scala.epoch}</artifactId>
                <version>${version.akka.http}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-http-spray-json_${version.scala.epoch}</artifactId>
                <version>${version.akka.http}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-http-jackson_${version.scala.epoch}</artifactId>
                <version>${version.akka.http}</version>
            </dependency>
            <dependency>
                <groupId>de.heikoseeberger</groupId>
                <artifactId>akka-sse_${version.scala.epoch}</artifactId>
                <version>3.0.0</version>
            </dependency>

			<!-- Akka monitoring. -->
            <dependency>
                <groupId>io.kamon</groupId>
                <artifactId>sigar-loader</artifactId>
                <version>1.6.6-rev002</version>
            </dependency>
            <dependency>
                <groupId>io.kamon</groupId>
                <artifactId>kamon-core_${version.scala.epoch}</artifactId>
                <version>${version.kamon}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjrt</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>io.kamon</groupId>
                <artifactId>kamon-jmx_${version.scala.epoch}</artifactId>
                <version>${version.kamon}</version>
            </dependency>
			<!-- <dependency> -->
			<!-- <groupId>io.kamon</groupId> -->
			<!-- <artifactId>kamon-statsd_${version.scala.epoch}</artifactId> -->
			<!-- <version>${version.kamon}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <groupId>io.kamon</groupId> -->
			<!-- <artifactId>kamon-datadog_${version.scala.epoch}</artifactId> -->
			<!-- <version>${version.kamon}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <groupId>io.kamon</groupId> -->
			<!-- <artifactId>kamon-newrelic_${version.scala.epoch}</artifactId> -->
			<!-- <version>${version.kamon}</version> -->
			<!-- </dependency> -->
			<!-- -->
            <dependency>
                <groupId>io.kamon</groupId>
                <artifactId>kamon-system-metrics_${version.scala.epoch}</artifactId>
                <version>${version.kamon}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.fusesource</groupId>
                        <artifactId>sigar</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

			<!-- AJDT see kamon. -->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjrt</artifactId>
                <version>${version.aspectj}</version>
            </dependency>
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>${version.aspectj}</version>
            </dependency>

			<!-- Play. Disabled via "provided" -->
            <dependency>
                <groupId>com.typesafe.play</groupId>
                <artifactId>play_${version.scala.epoch}</artifactId>
                <version>${version.play}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.play</groupId>
                <artifactId>play-test_${version.scala.epoch}</artifactId>
                <version>${version.play}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.play</groupId>
                <artifactId>play-netty-server_${version.scala.epoch}</artifactId>
                <version>${version.play}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.play</groupId>
                <artifactId>play-ws_${version.scala.epoch}</artifactId>
                <version>${version.play}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.play</groupId>
                <artifactId>play-cache_${version.scala.epoch}</artifactId>
                <version>${version.play}</version>
                <scope>provided</scope>
            </dependency>

			<!-- Functional programming. -->
            <dependency>
                <groupId>org.scalaz</groupId>
                <artifactId>scalaz-core_${version.scala.epoch}</artifactId>
                <version>${version.scalaz}</version>
            </dependency>
            <dependency>
                <groupId>org.scalaz</groupId>
                <artifactId>scalaz-core_${version.scalajs.library}</artifactId>
                <version>${version.scalaz}</version>
                <scope>provided</scope>
            </dependency>

			<!-- Protobuf for Scala. -->
            <dependency>
                <groupId>net.sandrogrzicic</groupId>
                <artifactId>scalabuff-runtime_${version.scala.epoch}</artifactId>
                <version>${version.scala.buff}</version>
            </dependency>
            <dependency>
                <groupId>net.sandrogrzicic</groupId>
                <artifactId>scalabuff-compiler_${version.scala.epoch}</artifactId>
                <version>${version.scala.buff}</version>
            </dependency>

			<!-- Configuration management. -->
            <dependency>
                <groupId>com.typesafe</groupId>
                <artifactId>config</artifactId>
                <version>1.3.4</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.jgit</groupId>
                <artifactId>org.eclipse.jgit</artifactId>
                <version>5.3.1.201904271842-r</version>
            </dependency>

			<!-- Indexing and searching. -->
            <dependency>
                <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-core</artifactId>
                <version>${version.lucene}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-analyzers-common</artifactId>
                <version>${version.lucene}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-queryparser</artifactId>
                <version>${version.lucene}</version>
            </dependency>

			<!-- Date and time. -->
            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>2.10.2</version>
            </dependency>
            <dependency>
                <groupId>org.joda</groupId>
                <artifactId>joda-convert</artifactId>
                <version>2.2.1</version>
            </dependency>
            <dependency>
                <groupId>org.threeten</groupId>
                <artifactId>threetenbp</artifactId>
                <version>1.4.0</version>
            </dependency>

			<!-- JSON serialization. -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${version.jackson}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${version.jackson}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${version.jackson}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.jr</groupId>
                <artifactId>jackson-jr-objects</artifactId>
                <version>${version.jackson}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.module</groupId>
                <artifactId>jackson-module-afterburner</artifactId>
                <version>${version.jackson}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.module</groupId>
                <artifactId>jackson-module-mrbean</artifactId>
                <version>${version.jackson}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.module</groupId>
                <artifactId>jackson-module-scala_${version.scala.epoch}</artifactId>
                <version>${version.jackson}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jdk8</artifactId>
                <version>${version.jackson}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>${version.jackson}</version>
            </dependency>

			<!-- Java Logging. -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${version.slf4j}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>${version.slf4j}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jul-to-slf4j</artifactId>
                <version>${version.slf4j}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>log4j-over-slf4j</artifactId>
                <version>${version.slf4j}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>${version.slf4j}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>
			<!-- Loggly for logback. -->
            <dependency>
                <groupId>org.logback-extensions</groupId>
                <artifactId>logback-ext-loggly</artifactId>
                <version>0.1.5</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback.contrib</groupId>
                <artifactId>logback-json-classic</artifactId>
                <version>0.1.5</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback.contrib</groupId>
                <artifactId>logback-jackson</artifactId>
                <version>0.1.5</version>
            </dependency>

			<!-- Dynamic compiler. -->
            <dependency>
                <groupId>org.codehaus.janino</groupId>
                <artifactId>janino</artifactId>
                <version>3.0.12</version>
            </dependency>

			<!-- Groovy. -->
            <dependency>
                <groupId>org.codehaus.groovy</groupId>
                <artifactId>groovy-all</artifactId>
                <version>${version.groovy}</version>
            </dependency>

			<!-- OSGI specification. -->
            <dependency>
                <groupId>org.osgi</groupId>
                <artifactId>org.osgi.core</artifactId>
                <version>6.0.0</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.osgi</groupId>
                <artifactId>org.osgi.compendium</artifactId>
                <version>5.0.0</version>
                <scope>provided</scope>
            </dependency>

			<!-- Protocols. -->
            <dependency>
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java</artifactId>
                <version>${version.protobuf}</version>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>uk.co.real-logic</groupId>
                <artifactId>sbe-tool</artifactId>
                <version>${version.sbe}</version>
            </dependency>
            <dependency>
                <groupId>org.agrona</groupId>
                <artifactId>agrona</artifactId>
                <version>${version.agrona}</version>
            </dependency>
            <dependency>
                <groupId>org.agrona</groupId>
                <artifactId>agrona-agent</artifactId>
                <version>${version.agrona}</version>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>org.xerial.snappy</groupId>
                <artifactId>snappy-java</artifactId>
                <version>${version.snappy}</version>
            </dependency>
			<!-- -->
            <dependency>
                <groupId>com.trueaccord.scalapb</groupId>
                <artifactId>scalapb-runtime_${version.scala.epoch}</artifactId>
                <version>${version.scala.protobuf}</version>
            </dependency>
            <dependency>
                <groupId>com.trueaccord.scalapb</groupId>
                <artifactId>scalapb-runtime_sjs0.6_2.11</artifactId>
                <version>${version.scala.protobuf}</version>
                <scope>provided</scope>
            </dependency>

			<!-- Collections -->
			<!-- <dependency> -->
			<!-- <groupId>com.google.guava</groupId> -->
			<!-- <artifactId>guava</artifactId> -->
			<!-- <version>17.0</version> -->
			<!-- </dependency> -->

			<!-- Java Benchmark Harness. -->
            <dependency>
                <groupId>org.openjdk.jmh</groupId>
                <artifactId>jmh-core</artifactId>
                <version>${version.jmh}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.openjdk.jmh</groupId>
                <artifactId>jmh-generator-annprocess</artifactId>
                <version>${version.jmh}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.openjdk.jmh</groupId>
                <artifactId>jmh-generator-bytecode</artifactId>
                <version>${version.jmh}</version>
                <scope>test</scope>
            </dependency>

			<!-- Java Testing. -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>${version.junit.jupiter}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${version.junit.jupiter}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.vintage</groupId>
                <artifactId>junit-vintage-engine</artifactId>
                <version>${version.junit.vintage}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.platform</groupId>
                <artifactId>junit-platform-runner</artifactId>
                <version>1.4.2</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${version.junit.legacy}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.easymock</groupId>
                <artifactId>easymock</artifactId>
                <version>4.0.2</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-all</artifactId>
                <version>1.10.19</version>
                <scope>test</scope>
            </dependency>

			<!-- Web access. -->
            <dependency>
                <groupId>net.sourceforge.htmlunit</groupId>
                <artifactId>htmlunit</artifactId>
                <version>2.35</version>
            </dependency>
			<!-- Note: check AWS, JGIT, Play-WS, IB -->
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpcore</artifactId>
                <version>4.4.11</version>
                <exclusions>
					<!-- Requires logback bridge. -->
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
                <version>4.5.8</version>
                <exclusions>
					<!-- Requires logback bridge. -->
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

			<!-- Cloud provider: amazon. -->
            <dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-java-sdk-core</artifactId>
                <version>${version.amazon.sdk}</version>
                <exclusions>
					<!-- Requires logback bridge. -->
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <artifactId>aws-java-sdk-route53</artifactId>
                <groupId>com.amazonaws</groupId>
                <version>${version.amazon.sdk}</version>
            </dependency>
            <dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-java-sdk-dynamodb</artifactId>
                <version>${version.amazon.sdk}</version>
            </dependency>
            <dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-java-sdk-s3</artifactId>
                <version>${version.amazon.sdk}</version>
            </dependency>
            <dependency>
                <groupId>com.amazonaws</groupId>
                <artifactId>aws-java-sdk-sns</artifactId>
                <version>${version.amazon.sdk}</version>
            </dependency>
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-directconnect</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-logs</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-elasticbeanstalk</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-iam</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-autoscaling</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-emr</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-cognitoidentity</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-cloudwatchmetrics</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-ses</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-swf-libraries</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-importexport</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-support</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-elasticache</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-cloudfront</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-opsworks</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-storagegateway</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-kinesis</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-redshift</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-cloudsearch</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-cloudformation</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-rds</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-sts</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-glacier</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-cloudtrail</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-ec2</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-cognitosync</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-simpledb</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-datapipeline</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-elasticloadbalancing</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->
			<!-- <dependency> -->
			<!-- <artifactId>aws-java-sdk-elastictranscoder</artifactId> -->
			<!-- <groupId>com.amazonaws</groupId> -->
			<!-- <version>${version.amazon.sdk}</version> -->
			<!-- </dependency> -->

			<!-- Cloud provider: google. -->
			<!-- <dependency> -->
			<!-- <groupId>com.google.apis</groupId> -->
			<!-- <artifactId>google-api-services-datastore</artifactId> -->
			<!-- <version>v1-rev10-1.22.0</version> -->
			<!-- </dependency> -->

			<!-- Native access. -->
            <dependency>
                <groupId>net.java.dev.jna</groupId>
                <artifactId>jna</artifactId>
                <version>5.3.1</version>
            </dependency>

			<!-- Cryptography provider. -->
            <dependency>
                <groupId>org.jasypt</groupId>
                <artifactId>jasypt</artifactId>
                <version>1.9.2</version>
            </dependency>
            <dependency>
                <groupId>org.bouncycastle</groupId>
                <artifactId>bcprov-jdk15on</artifactId>
                <version>${version.bouncy}</version>
            </dependency>
            <dependency>
                <groupId>org.bouncycastle</groupId>
                <artifactId>bcprov-ext-jdk15on</artifactId>
                <version>${version.bouncy}</version>
            </dependency>
            <dependency>
                <groupId>org.bouncycastle</groupId>
                <artifactId>bcpkix-jdk15on</artifactId>
                <version>${version.bouncy}</version>
            </dependency>

			<!-- SQL providers -->
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${version.postgres}</version>
            </dependency>
            <dependency>
                <groupId>com.zaxxer</groupId>
                <artifactId>HikariCP</artifactId>
                <version>${version.hikari}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.slick</groupId>
                <artifactId>slick_${version.scala.epoch}</artifactId>
                <version>${version.slick}</version>
            </dependency>
            <dependency>
                <groupId>org.sql2o</groupId>
                <artifactId>sql2o</artifactId>
                <version>1.6.0</version>
            </dependency>
            <dependency>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-core</artifactId>
                <version>3.6.3</version>
            </dependency>
            <dependency>
                <groupId>com.mattbertolini</groupId>
                <artifactId>liquibase-slf4j</artifactId>
                <version>2.0.0</version>
            </dependency>

			<!-- Settings reader. -->
            <dependency>
                <groupId>org.ini4j</groupId>
                <artifactId>ini4j</artifactId>
                <version>0.5.4</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

	<!-- Keep for versions:display-plugin-updates -->
    <prerequisites>
        <maven>${version.maven}</maven>
    </prerequisites>

    <build>

        <extensions>

			<!-- Enable Amazon S3 bucket transport. -->
            <extension>
                <groupId>com.carrotgarden.maven.wagons</groupId>
                <artifactId>maven-s3-wagon</artifactId>
                <version>1.2.2-rev001</version>
            </extension>

        </extensions>

        <plugins>

			<!-- <plugin> -->
			<!-- <groupId>org.apache.maven.plugins</groupId> -->
			<!-- <artifactId>maven-enforcer-plugin</artifactId> -->
			<!-- </plugin> -->

			<!-- FIXME breaks s3:// -->
			<!-- http://takari.io/book/40-lifecycle.html. -->
			<!-- <plugin> -->
			<!-- <groupId>io.takari.maven.plugins</groupId> -->
			<!-- <artifactId>takari-lifecycle-plugin</artifactId> -->
			<!-- <extensions>true</extensions> -->
			<!-- <configuration> -->
			<!-- <sourceJar>true</sourceJar> -->
			<!-- <testJar>true</testJar> -->
			<!-- </configuration> -->
			<!-- </plugin> -->

        </plugins>

        <pluginManagement>

            <plugins>

                <plugin>
                    <groupId>com.carrotgarden.maven</groupId>
                    <artifactId>scalor-maven-plugin_2.12</artifactId>
                    <version>1.5.0.20190502185130</version>
                </plugin>

                <plugin>
                    <groupId>com.carrotgarden.maven</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>1.6.20190428102750</version>
                </plugin>

                <plugin>
                    <groupId>com.carrotgarden.maven</groupId>
                    <artifactId>bintray-maven-plugin</artifactId>
                    <version>1.4.20190427204453</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.plexus</groupId>
                    <artifactId>plexus-component-metadata</artifactId>
                    <version>2.0.0</version>
                    <dependencies>
						<!-- Java 11 support. -->
                        <dependency>
                            <groupId>org.ow2.asm</groupId>
                            <artifactId>asm</artifactId>
                            <version>7.1</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>1.1.0</version>
                </plugin>

                <plugin>
                    <groupId>com.google.code.maven-replacer-plugin</groupId>
                    <artifactId>replacer</artifactId>
                    <version>1.5.3</version>
                </plugin>

                <plugin>
                    <groupId>com.ruleoftech</groupId>
                    <artifactId>markdown-page-generator-plugin</artifactId>
                    <version>2.1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>2.7</version>
                    <configuration>
                        <rulesUri>https://raw.githubusercontent.com/random-maven/arkon/master/config/maven-version-rules.xml</rulesUri>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>io.takari.maven.plugins</groupId>
                    <artifactId>takari-lifecycle-plugin</artifactId>
                    <version>1.13.9</version>
                </plugin>

                <plugin>
                    <groupId>com.google.code.sbt-compiler-maven-plugin</groupId>
                    <artifactId>sbt-compiler-maven-plugin</artifactId>
                    <version>1.0.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-toolchains-plugin</artifactId>
                    <version>1.1</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>toolchain</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <toolchains>
                            <jdk>
                                <version>${version.java}</version>
                            </jdk>
                        </toolchains>
                    </configuration>
                </plugin>


                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>xml-maven-plugin</artifactId>
                    <version>1.0.2</version>
                    <dependencies>
						<!-- Provide XSLT 2.0 processor. -->
                        <dependency>
                            <groupId>net.sf.saxon</groupId>
                            <artifactId>Saxon-HE</artifactId>
                            <version>9.9.1-2</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>keytool-maven-plugin</artifactId>
                    <version>1.5</version>
                </plugin>

                <plugin>
                    <groupId>net.nicoulaj.maven.plugins</groupId>
                    <artifactId>checksum-maven-plugin</artifactId>
                    <version>1.8</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jarsigner-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>3.2.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-invoker-plugin</artifactId>
                    <version>3.2.0</version>
                    <configuration>
                        <debug>false</debug>
                        <showErrors>false</showErrors>
                        <streamLogs>false</streamLogs>
                        <ignoreFailures>false</ignoreFailures>
                        <projectsDirectory>${project.basedir}/src/it</projectsDirectory>
                        <cloneProjectsTo>${project.basedir}/target/it</cloneProjectsTo>
                        <invokerPropertiesFile>invoker.properties</invokerPropertiesFile>
                        <preBuildHookScript>setup</preBuildHookScript>
                        <postBuildHookScript>verify</postBuildHookScript>
                        <goals>
							<!-- Goals for child maven. -->
                            <goal>clean</goal>
                            <goal>install</goal>
                        </goals>
                    </configuration>
                    <executions>
                        <execution>
                            <id>integration-test</id>
                            <goals>
								<!-- Goals for parent maven. -->
                                <goal>install</goal>
                                <goal>run</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.servicemix.tooling</groupId>
                    <artifactId>depends-maven-plugin</artifactId>
                    <version>1.4.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>1.6.0</version>
                </plugin>

                <plugin>
                    <groupId>com.mycila.maven-license-plugin</groupId>
                    <artifactId>maven-license-plugin</artifactId>
                    <version>1.10.b1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-plugin-plugin</artifactId>
                    <version>3.6.0</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>wagon-maven-plugin</artifactId>
                    <version>2.0.0</version>
                </plugin>

                <plugin>
                    <groupId>org.kuali.maven.plugins</groupId>
                    <artifactId>wagon-maven-plugin</artifactId>
                    <version>1.0.5</version>
                </plugin>

                <plugin>
                    <groupId>org.kuali.maven.plugins</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <version>2.0.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-help-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>1.6</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-scm-plugin</artifactId>
                    <version>${version.maven.scm}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${version.maven.javadoc}</version>
                    <configuration>
                        <quiet>true</quiet>
                        <show>protected</show>
                        <linksource>true</linksource>
                        <windowtitle><![CDATA[${project.artifactId}-${project.version} / ${projectTimeISO}]]></windowtitle>
                        <doctitle><![CDATA[${project.artifactId}-${project.version} / ${projectTimeISO}]]></doctitle>
                        <header><![CDATA[<a href="${project.url}" target="_blank">${project.artifactId}</a><br>${project.version} / ${projectTimeISO}]]></header>
                        <footer><![CDATA[<a href="${project.url}" target="_blank">${project.artifactId}</a><br>${project.version} / ${projectTimeISO}]]></footer>
                        <bottom><![CDATA[Copyright © {inceptionYear}-{currentYear} <a href="${project.organization.url}" target="_blank">${project.organization.name}</a>. All Rights Reserved.]]></bottom>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.0.1</version>
                    <executions>
						<!-- Override default execution from parent super pom.xml. -->
						<!-- http://blog.peterlynch.ca/2010/05/maven-how-to-prevent-generate-sources.html -->
                        <execution>
							<!-- Disable default execution. -->
                            <id>attach-sources</id>
                            <phase>invalid</phase>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                        <execution>
							<!-- Provide new default execution. -->
							<!-- Always attach source on package. -->
                            <id>attach-sources-no-fork</id>
                            <phase>package</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>groovy-maven-plugin</artifactId>
                    <version>2.1</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.codehaus.groovy</groupId>
                            <artifactId>groovy-all</artifactId>
                            <version>${version.groovy}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${version.maven.testing}</version>
                    <dependencies>
						<!-- <dependency> -->
						<!-- <groupId>org.apache.maven.surefire</groupId> -->
						<!-- <artifactId>surefire-junit4</artifactId> -->
						<!-- <version>${version.maven.testing}</version> -->
						<!-- </dependency> -->
						<!-- <dependency> -->
						<!-- <groupId>org.junit.platform</groupId> -->
						<!-- <artifactId>junit-platform-surefire-provider</artifactId> -->
						<!-- <version>${version.junit.platform}</version> -->
						<!-- </dependency> -->
                        <dependency>
                            <groupId>org.junit.jupiter</groupId>
                            <artifactId>junit-jupiter-engine</artifactId>
                            <version>${version.junit.jupiter}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.junit.vintage</groupId>
                            <artifactId>junit-vintage-engine</artifactId>
                            <version>${version.junit.vintage}</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <runOrder>alphabetical</runOrder>
                        <includes>
                            <include>**/*Test.class</include>
                            <include>**/*Suite.class</include>
                        </includes>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${version.maven.testing}</version>
                    <dependencies>
						<!-- <dependency> -->
						<!-- <groupId>org.apache.maven.surefire</groupId> -->
						<!-- <artifactId>surefire-junit4</artifactId> -->
						<!-- <version>${version.maven.testing}</version> -->
						<!-- </dependency> -->
						<!-- <dependency> -->
						<!-- <groupId>org.junit.platform</groupId> -->
						<!-- <artifactId>junit-platform-surefire-provider</artifactId> -->
						<!-- <version>${version.junit.platform}</version> -->
						<!-- </dependency> -->
                        <dependency>
                            <groupId>org.junit.jupiter</groupId>
                            <artifactId>junit-jupiter-engine</artifactId>
                            <version>${version.junit.jupiter}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.junit.vintage</groupId>
                            <artifactId>junit-vintage-engine</artifactId>
                            <version>${version.junit.vintage}</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <includes>
                            <include>**/*IT.java</include>
                            <include>**/*Verify.java</include>
                        </includes>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>

                <plugin>
                    <groupId>net.alchim31.maven</groupId>
                    <artifactId>scala-maven-plugin</artifactId>
                    <version>4.0.2</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>3.0.0-M1</version>
                    <executions>
                        <execution>
                            <id>enforce</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <configuration>
                                <rules>
                                    <requireMavenVersion>
                                        <version>${version.maven}</version>
                                    </requireMavenVersion>
                                    <requireJavaVersion>
                                        <version>${version.java}</version>
                                    </requireJavaVersion>
                                </rules>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.5.3</version>
                    <configuration>

						<!-- see super-pom.xml -->

						<!-- invocataion: release:prepare -->
                        <preparationGoals>${release.goals.prepare}</preparationGoals>

						<!-- invocataion: release:perform -->
                        <useReleaseProfile>true</useReleaseProfile>
                        <goals>${release.goals.perform}</goals>
                        <release.profiles>${release.profiles}</release.profiles>

						<!-- nested invocation arguments for both release:prepare and release:perform -->
						<!-- <arguments>${release.nested.args}</arguments> -->

                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-bundle-plugin</artifactId>
                    <version>4.2.0</version>
                </plugin>

                <plugin>
                    <groupId>com.github.igor-petruk.protobuf</groupId>
                    <artifactId>protobuf-maven-plugin</artifactId>
                    <version>0.6.5</version>
                </plugin>

            </plugins>

        </pluginManagement>

    </build>

	<!-- Plugin development. -->
    <pluginRepositories>
		<!-- <pluginRepository> -->
		<!-- <id>random-maven</id> -->
		<!-- <url>https://dl.bintray.com/random-maven/maven</url> -->
		<!-- </pluginRepository> -->
		<!-- <pluginRepository> -->
		<!-- <id>sonatype-releases</id> -->
		<!-- <url>https://oss.sonatype.org/content/repositories/releases/</url> -->
		<!-- </pluginRepository> -->
		<!-- <pluginRepository> -->
		<!-- <id>sonatype-comcarrotgarden</id> -->
		<!-- <url>https://oss.sonatype.org/content/repositories/comcarrotgarden-1027/</url> -->
		<!-- </pluginRepository> -->
    </pluginRepositories>

    <profiles>

		<!-- Publish release revision. -->
        <profile>
            <id>release-revision</id>
            <activation>
                <property>
                    <name>release-revision</name>
                </property>
                <file>
                    <exists>.mvn/pom-release-revision.md</exists>
                </file>
            </activation>
            <properties>
				<!-- Release tag. -->
                <release.revision.tag>${revision}</release.revision.tag>
				<!-- Release comment. -->
                <release.revision.message>release ${revision}</release.revision.message>
				<!-- Release descriptor. -->
                <release.revision.file>release-revision.conf</release.revision.file>
                <release.revision.path>${project.basedir}/.mvn/${release.revision.file}</release.revision.path>
            </properties>
            <build>
                <plugins>
					<!-- Produce descriptor. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <configuration>
                            <target>
                                <echo file="${release.revision.path}" append="false">
<![CDATA[
# release revision
version=${revision}
]]>
                                </echo>
                            </target>
                        </configuration>
                        <executions>
                            <execution>
                                <id>release-revision</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Publish release tag. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-scm-plugin</artifactId>
                        <executions>
							<!-- Add descriptor. -->
                            <execution>
                                <id>release-revision-register</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>add</goal>
                                </goals>
                                <configuration>
                                    <pushChanges>false</pushChanges>
                                    <includes>**/${release.revision.file}</includes>
                                </configuration>
                            </execution>
							<!-- Commit descriptor. -->
                            <execution>
                                <id>release-revision-commit</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>checkin</goal>
                                </goals>
                                <configuration>
                                    <pushChanges>true</pushChanges>
                                    <message>${release.revision.message}</message>
                                </configuration>
                            </execution>
							<!-- Tag release. -->
                            <execution>
                                <id>release-revision-tag</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>tag</goal>
                                </goals>
                                <configuration>
                                    <pushChanges>true</pushChanges>
                                    <message>${release.revision.message}</message>
                                    <tag>${release.revision.tag}</tag>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Scala compiler setup. -->
        <profile>
            <id>scalor</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scalor.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
					<!-- Disable default compiler. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                            <skipMain>true</skipMain>
                        </configuration>
                    </plugin>
					<!-- Enable alternative compiler. -->
                    <plugin>
                        <groupId>com.carrotgarden.maven</groupId>
                        <artifactId>scalor-maven-plugin_2.12</artifactId>
                        <configuration>
                            <zincOptionsJava>
                                -encoding
                                ${project.build.sourceEncoding}
                                -deprecation
                                -source
                                ${version.java}
                                -target
                                ${version.java}
                            </zincOptionsJava>
                            <zincOptionsScala>
                                -encoding
                                ${project.build.sourceEncoding}
                                -target:jvm-${version.java}
                                -feature
                                -unchecked
                                -deprecation
                                -Xmaxerrs
                                10
                                -compileorder:Mixed
                            </zincOptionsScala>
                            <defineBridge>
								<!-- Required Scala bridge. -->
                                <dependency>
                                    <groupId>org.scala-sbt</groupId>
                                    <artifactId>compiler-bridge_${version.scala.epoch}</artifactId>
                                    <version>${version.scala.zinc}</version>
                                </dependency>
                            </defineBridge>
                            <defineCompiler>
								<!-- Required Scala compiler. -->
                                <dependency>
                                    <groupId>org.scala-lang</groupId>
                                    <artifactId>scala-compiler</artifactId>
                                    <version>${version.scala.release}</version>
                                </dependency>
                            </defineCompiler>
                            <definePluginList>
								<!-- Macro type provider support. -->
                                <dependency>
                                    <groupId>org.scalamacros</groupId>
                                    <artifactId>paradise_${version.scala.release}</artifactId>
                                    <version>${version.scala.plugin.macro}</version>
                                </dependency>
                            </definePluginList>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
									<!-- Install Eclipse companion plugin. -->
                                    <goal>eclipse-config</goal>
									<!-- Add Scala sources to the project. -->
                                    <goal>register-macro</goal>
                                    <goal>register-main</goal>
                                    <goal>register-test</goal>
									<!-- Compile Java and Scala in 3 scopes. -->
                                    <goal>compile-macro</goal>
                                    <goal>compile-main</goal>
                                    <goal>compile-test</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Scala.js compiler setup. -->
        <profile>
            <id>scalor-js</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scalor-js.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
					<!-- Disable default compiler. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                            <skipMain>true</skipMain>
                        </configuration>
                    </plugin>
					<!-- Enable alternative compiler. -->
                    <plugin>
                        <groupId>com.carrotgarden.maven</groupId>
                        <artifactId>scalor-maven-plugin_2.12</artifactId>
                        <configuration>
                            <zincOptionsJava>
                                -encoding
                                ${project.build.sourceEncoding}
                                -deprecation
                                -source
                                ${version.java}
                                -target
                                ${version.java}
                            </zincOptionsJava>
                            <zincOptionsScala>
                                -P:scalajs:sjsDefinedByDefault
                                -encoding
                                ${project.build.sourceEncoding}
                                -target:jvm-${version.java}
                                -feature
                                -unchecked
                                -deprecation
                                -Xmaxerrs
                                10
                                -compileorder:Mixed
                            </zincOptionsScala>
                            <defineBridge>
								<!-- Required Scala bridge. -->
                                <dependency>
                                    <groupId>org.scala-sbt</groupId>
                                    <artifactId>compiler-bridge_${version.scala.epoch}</artifactId>
                                    <version>${version.scala.zinc}</version>
                                </dependency>
                            </defineBridge>
                            <defineCompiler>
								<!-- Required Scala compiler. -->
                                <dependency>
                                    <groupId>org.scala-lang</groupId>
                                    <artifactId>scala-compiler</artifactId>
                                    <version>${version.scala.release}</version>
                                </dependency>
                            </defineCompiler>
                            <definePluginList>
								<!-- Macro type provider support. -->
                                <dependency>
                                    <groupId>org.scalamacros</groupId>
                                    <artifactId>paradise_${version.scala.release}</artifactId>
                                    <version>${version.scala.plugin.macro}</version>
                                </dependency>
								<!-- Generate Scala.js *.sjsir classes. -->
                                <dependency>
                                    <groupId>org.scala-js</groupId>
                                    <artifactId>scalajs-compiler_${version.scala.release}</artifactId>
                                    <version>${version.scalajs.release}</version>
                                </dependency>
                            </definePluginList>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
									<!-- Install Eclipse companion plugin. -->
                                    <goal>eclipse-config</goal>
									<!-- Add Scala sources to the project. -->
                                    <goal>register-macro</goal>
                                    <goal>register-main</goal>
                                    <goal>register-test</goal>
									<!-- Compile Java and Scala in 3 scopes. -->
                                    <goal>compile-macro</goal>
                                    <goal>compile-main</goal>
                                    <goal>compile-test</goal>
									<!-- Generate Scala.js runtime.js JavaScript. -->
                                    <goal>scala-js-link-main</goal>
                                    <goal>scala-js-link-test</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Scala.js JUnit testing. -->
        <profile>
            <id>scalor-junit-tools</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scalor-junit-tools.md</exists>
                </file>
            </activation>
            <dependencies>
				<!-- Enable JUnit 4/5 testing. JS tests are using JUnit 4, and JVM tests are using JUnit 5. JS tests are invoked inside 
					JS-VM, and JVM tests are invoked inside JVM. -->
                <dependency>
                    <groupId>org.junit.jupiter</groupId>
                    <artifactId>junit-jupiter-api</artifactId>
                    <version>${version.junit.jupiter}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.junit.platform</groupId>
                    <artifactId>junit-platform-runner</artifactId>
                    <version>${version.junit.platform}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.junit.jupiter</groupId>
                    <artifactId>junit-jupiter-engine</artifactId>
                    <version>${version.junit.jupiter}</version>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                    <version>${version.junit.vintage}</version>
                    <scope>test</scope>
                </dependency>
				<!-- Enable JUnit Scala.js testing. Provides custom JUnit runners, which run JUnit 4 tests inside JS-VM. Note: keep order: 
					after org.junit.* dependencies (see scalajs-junit-test-runtime). -->
                <dependency>
                    <groupId>com.carrotgarden.sjs</groupId>
                    <artifactId>scala-js-junit-tools_${version.scala.epoch}</artifactId>
                    <version>1.1.2.20180226041527</version>
                    <scope>test</scope>
                </dependency>
				<!-- Enable logging of JS-VM output from scala-js-junit-tools. -->
                <dependency>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                    <version>1.2.3</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.carrotgarden.maven</groupId>
                        <artifactId>scalor-maven-plugin_2.12</artifactId>
                        <configuration>
                            <defineCompiler>
								<!-- Required Scala compiler. -->
                                <dependency>
                                    <groupId>org.scala-lang</groupId>
                                    <artifactId>scala-compiler</artifactId>
                                    <version>${version.scala.release}</version>
                                </dependency>
								<!-- Convert JUnit annotations to Scala.js JUnit meta data. This dependency provides replacement JUnit *.sjsir classes. -->
                                <dependency>
                                    <groupId>org.scala-js</groupId>
                                    <artifactId>scalajs-junit-test-runtime_${version.scala.epoch}</artifactId>
                                    <version>${version.scalajs.release}</version>
                                </dependency>
                            </defineCompiler>
                            <definePluginList>
								<!-- Macro type provider support. -->
                                <dependency>
                                    <groupId>org.scalamacros</groupId>
                                    <artifactId>paradise_${version.scala.release}</artifactId>
                                    <version>${version.scala.plugin.macro}</version>
                                </dependency>
								<!-- Generate Scala.js *.sjsir classes. -->
                                <dependency>
                                    <groupId>org.scala-js</groupId>
                                    <artifactId>scalajs-compiler_${version.scala.release}</artifactId>
                                    <version>${version.scalajs.release}</version>
                                </dependency>
								<!-- Convert JUnit annotations to Scala.js JUnit meta data. This plugin does actual conversion of JUnit test classes 
									for JS-VM. -->
                                <dependency>
                                    <groupId>org.scala-js</groupId>
                                    <artifactId>scalajs-junit-test-plugin_${version.scala.release}</artifactId>
                                    <version>${version.scalajs.release}</version>
                                </dependency>
                            </definePluginList>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
									<!-- Provide Scala.js JS-VM testing environment. -->
                                    <goal>scala-js-env-prov-webjars</goal>
                                    <goal>scala-js-env-prov-nodejs</goal>
                                    <goal>scala-js-env-conf-nodejs</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Use custom maven plugin annotations. -->
        <profile>
            <id>plugin-extra</id>
            <activation>
                <file>
                    <exists>.mvn/pom-plugin-extra.md</exists>
                </file>
            </activation>
            <properties>
                <version.maven.plugin.extra>1.2.20190427171248</version.maven.plugin.extra>
            </properties>
            <dependencies>
				<!-- Provide custom annotations. -->
                <dependency>
                    <groupId>com.carrotgarden.maven</groupId>
                    <artifactId>maven-plugin-tools-annotations</artifactId>
                    <version>${version.maven.plugin.extra}</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-plugin-plugin</artifactId>
                        <dependencies>
							<!-- Provide custom extractor. -->
                            <dependency>
                                <groupId>com.carrotgarden.maven</groupId>
                                <artifactId>maven-plugin-tools-annotations</artifactId>
                                <version>${version.maven.plugin.extra}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
							<!-- Use only custom extractor. -->
                            <extractors>
                                <extractor>java-annotations-extra</extractor>
                            </extractors>
                        </configuration>
                        <executions>
                            <execution>
                                <id>default-descriptor</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>descriptor</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Use release stamp from the environment variable. -->
        <profile>
            <id>env-release-stamp</id>
            <activation>
                <property>
                    <name>env.RELEASE_STAMP</name>
                </property>
            </activation>
            <properties>
                <release.stamp>${env.RELEASE_STAMP}</release.stamp>
            </properties>
        </profile>

		<!-- Use scala version 2.11. -->
        <profile>
            <id>scala-2.11</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scala-2.11.md</exists>
                </file>
            </activation>
            <properties>
                <version.scala211.epoch>2.11</version.scala211.epoch>
                <version.scala211.release>2.11.0</version.scala211.release>
                <version.scala.epoch>${version.scala211.epoch}</version.scala.epoch>
                <version.scala.release>${version.scala211.release}</version.scala.release>
            </properties>
        </profile>

		<!-- Use scala version 2.12. -->
        <profile>
            <id>scala-2.12</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scala-2.12.md</exists>
                </file>
            </activation>
            <properties>
                <version.scala212.epoch>2.12</version.scala212.epoch>
                <version.scala212.release>2.12.0</version.scala212.release>
                <version.scala.epoch>${version.scala212.epoch}</version.scala.epoch>
                <version.scala.release>${version.scala212.release}</version.scala.release>
            </properties>
        </profile>

		<!-- Use scala version 2.13. -->
        <profile>
            <id>scala-2.13</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scala-2.13.md</exists>
                </file>
            </activation>
            <properties>
                <version.scala213.epoch>2.13</version.scala213.epoch>
                <version.scala213.release>2.13.0</version.scala213.release>
                <version.scala.epoch>${version.scala213.epoch}</version.scala.epoch>
                <version.scala.release>${version.scala213.release}</version.scala.release>
            </properties>
        </profile>

		<!-- Disable any testing. -->
        <profile>
            <id>skip-test</id>
            <activation>
                <file>
                    <exists>.mvn/pom-skip-test.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
					<!-- Provide -D skipTests -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
					<!-- Provide -D skipTests -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <skipTests>true</skipTests>
                        </configuration>
                    </plugin>
					<!-- Provide -D invoker.skip=true -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-invoker-plugin</artifactId>
                        <configuration>
                            <skipInstallation>true</skipInstallation>
                            <skipInvocation>true</skipInvocation>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Produce simple deployment pom.xml -->
        <profile>
            <id>flatten</id>
            <activation>
                <file>
                    <missing>pom-no-flatten.md</missing>
                </file>
            </activation>
            <build>
                <plugins>
					<!-- Produce clean pom.xml -->
                    <plugin>
                        <groupId>com.carrotgarden.maven</groupId>
                        <artifactId>flatten-maven-plugin</artifactId>
                        <configuration>
                            <memberRemoveList>
                                <member>parent</member>
                                <member>properties</member>
                                <member>distributionManagement</member>
                                <member>dependencyManagement</member>
                                <member>repositories</member>
                                <member>pluginRepositories</member>
                                <member>build</member>
                                <member>profiles</member>
                                <member>reporting</member>
                            </memberRemoveList>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>flatten</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Produce bill of materials pom.xml -->
        <profile>
            <id>resolve</id>
            <activation>
                <file>
                    <exists>.mvn/pom-resolve.md</exists>
                </file>
            </activation>
            <properties>
				<!-- Absolute path to generated pom.xml -->
                <resolve.pomFile>${project.pomFile}.resolve</resolve.pomFile>
            </properties>
            <build>
                <plugins>
					<!-- Produce clean pom.xml with transitive dependencies -->
                    <plugin>
                        <groupId>com.carrotgarden.maven</groupId>
                        <artifactId>flatten-maven-plugin</artifactId>
                        <configuration>
                            <memberRemoveList>
                                <member>parent</member>
                                <member>properties</member>
                                <member>distributionManagement</member>
                                <member>dependencyManagement</member>
                                <member>repositories</member>
                                <member>pluginRepositories</member>
                                <member>build</member>
                                <member>profiles</member>
                                <member>reporting</member>
                            </memberRemoveList>
                            <targetPomFile>${resolve.pomFile}</targetPomFile>
                            <excludeTransitive>false</excludeTransitive>
                            <packagingSwitchList>
                                <packaging>pom</packaging>
                            </packagingSwitchList>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>flatten</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Bintray random-scalor. -->
        <profile>
            <id>repo-random-scalor</id>
            <activation>
                <file>
                    <exists>.mvn/pom-repo-random-scalor.md</exists>
                </file>
            </activation>
            <repositories>
                <repository>
                    <id>random-scalor</id>
                    <url>http://dl.bintray.com/random-scalor/maven</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>random-scalor</id>
                    <url>http://dl.bintray.com/random-scalor/maven</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>

		<!-- Bintray random-maven. -->
        <profile>
            <id>repo-random-maven</id>
            <activation>
                <file>
                    <exists>.mvn/pom-repo-random-maven.md</exists>
                </file>
            </activation>
            <repositories>
                <repository>
                    <id>random-maven</id>
                    <url>http://dl.bintray.com/random-maven/maven</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>random-maven</id>
                    <url>http://dl.bintray.com/random-maven/maven</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>

		<!-- Bintray deploy. -->
        <profile>
            <id>distro-bintray</id>
            <activation>
                <file>
                    <exists>.mvn/pom-distro-bintray.md</exists>
                </file>
            </activation>
            <properties>
                <bintray.subject>invalid</bintray.subject>
                <bintray.repository>invalid</bintray.repository>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>com.carrotgarden.maven</groupId>
                        <artifactId>bintray-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>bintray-deploy</id>
                                <goals>
                                    <goal>deploy</goal>
                                </goals>
                                <configuration>
                                    <subject>${bintray.subject}</subject>
                                    <repository>${bintray.repository}</repository>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Bintray upload. -->
        <profile>
            <id>upload-bintray</id>
            <activation>
                <file>
                    <exists>.mvn/pom-upload-bintray.md</exists>
                </file>
            </activation>
            <properties>
                <bintray.subject>invalid</bintray.subject>
                <bintray.repository>invalid</bintray.repository>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>com.carrotgarden.maven</groupId>
                        <artifactId>bintray-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>bintray-upload</id>
                                <goals>
                                    <goal>upload</goal>
                                </goals>
                                <configuration>
                                    <subject>${bintray.subject}</subject>
                                    <repository>${bintray.repository}</repository>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Maven/Eclipse integration. -->
        <profile>
            <id>m2e-lifecycle-mapping</id>
            <activation>
				<!-- Eclipse detection: user property set by Eclipse/M2E. -->
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.eclipse.m2e</groupId>
                            <artifactId>lifecycle-mapping</artifactId>
                            <version>1.0.0</version>
                            <configuration>
                                <lifecycleMappingMetadata>
                                    <pluginExecutions>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.felix</groupId>
                                                <artifactId>maven-bundle-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>manifest</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>com.carrotgarden.maven</groupId>
                                                <artifactId>flatten-maven-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>flatten</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.codehaus.plexus</groupId>
                                                <artifactId>plexus-component-metadata</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>generate-metadata</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>com.github.klieber</groupId>
                                                <artifactId>phantomjs-maven-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>install</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>com.github.eirslett</groupId>
                                                <artifactId>frontend-maven-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>install-node-and-npm</goal>
                                                    <goal>npm</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId>maven-plugin-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>descriptor</goal>
                                                    <goal>addPluginArtifactMetadata</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.codehaus.gmaven</groupId>
                                                <artifactId>groovy-maven-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>execute</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.codehaus.mojo</groupId>
                                                <artifactId>xml-maven-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>transform</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.codehaus.mojo</groupId>
                                                <artifactId>exec-maven-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>exec</goal>
                                                    <goal>java</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>com.vladsch.flexmark</groupId>
                                                <artifactId>markdown-page-generator-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>generate</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>com.google.code.maven-replacer-plugin</groupId>
                                                <artifactId>replacer</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>replace</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId>maven-antrun-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>run</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <execute>
                                                    <runOnIncremental>false</runOnIncremental>
                                                </execute>
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId>maven-scm-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>checkout</goal>
                                                    <goal>update</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <execute>
                                                    <runOnIncremental>false</runOnIncremental>
                                                </execute>
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId> maven-toolchains-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>toolchain</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId>maven-dependency-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>list</goal>
                                                    <goal>build-classpath</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <execute>
                                                    <runOnConfiguration>true</runOnConfiguration>
                                                    <runOnIncremental>false</runOnIncremental>
                                                </execute>
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.codehaus.mojo</groupId>
                                                <artifactId>build-helper-maven-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>regex-property</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <execute>
                                                    <runOnConfiguration>true</runOnConfiguration>
                                                    <runOnIncremental>false</runOnIncremental>
                                                </execute>
                                            </action>
                                        </pluginExecution>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.apache.maven.plugins</groupId>
                                                <artifactId>maven-invoker-plugin</artifactId>
                                                <versionRange>[0,)</versionRange>
                                                <goals>
                                                    <goal>install</goal>
                                                    <goal>integration-test</goal>
                                                    <goal>verify</goal>
                                                    <goal>run</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <ignore />
                                            </action>
                                        </pluginExecution>
                                    </pluginExecutions>
                                </lifecycleMappingMetadata>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

		<!-- Provision service. -->
        <profile>
            <id>service</id>

            <activation>
                <activeByDefault>false</activeByDefault>
				<!-- https://github.com/mojohaus/flatten-maven-plugin/issues/57 -->
				<!-- <file> -->
				<!-- <exists>.mvn/pom-service.md</exists> -->
				<!-- </file> -->
            </activation>

            <properties>

				<!-- Service user name -->
                <service.user.name>${user.name}</service.user.name>

				<!-- Service install date/time -->
                <service.unit.time>${maven.build.timestamp}</service.unit.time>

				<!-- Service unit systemd name. -->
                <service.unit.name>${project.artifactId}</service.unit.name>

				<!-- JVM restart settings. -->
                <service.Restart>on-failure</service.Restart>
                <service.RestartSec>5</service.RestartSec>

				<!-- JVM System.exit code to stop service restart. -->
                <service.SuccessExitStatus>0</service.SuccessExitStatus>
				<!-- JVM System.exit code to make service restart. -->
                <service.RestartForceExitStatus>101</service.RestartForceExitStatus>

				<!-- JVM termination mode. -->
                <service.KillMode>mixed</service.KillMode>
				<!-- JVM termination signal. -->
                <service.KillSignal>TERM</service.KillSignal>

				<!-- JVM initialize wait time in seconds. -->
                <service.TimeoutStartSec>15</service.TimeoutStartSec>
				<!-- JVM termination wait time in seconds. -->
                <service.TimeoutStopSec>15</service.TimeoutStopSec>

				<!-- Main java class for the service. -->
                <service.main.class>proc.Init</service.main.class>

				<!-- Service runtime folder layout. -->
                <service.root.dir>${project.basedir}</service.root.dir>
                <service.base.dir>${service.root.dir}/base</service.base.dir>
                <service.conf.dir>${service.root.dir}/conf</service.conf.dir>
                <service.init.dir>${service.root.dir}/init</service.init.dir>
                <service.logs.dir>${service.root.dir}/logs</service.logs.dir>
                <service.temp.dir>${service.root.dir}/temp</service.temp.dir>

				<!-- Java dependency class path. -->
                <service.init.deps>${service.init.dir}/init.deps</service.init.deps>
                <service.main.deps>${service.init.dir}/main.deps</service.main.deps>

				<!-- Service control scripts. -->
                <service.exec.install>${service.init.dir}/service-install.sh</service.exec.install>
                <service.exec.start>${service.init.dir}/service-start.sh</service.exec.start>
                <service.exec.stop>${service.init.dir}/service-stop.sh</service.exec.stop>
                <service.exec.uninstall>${service.init.dir}/service-uninstall.sh</service.exec.uninstall>

				<!-- Service init jars dependency. -->
                <service.init.groupId>com.carrotgarden.proc</service.init.groupId>
                <service.init.artifactId>carrot-proc-init</service.init.artifactId>
                <service.init.version>[0,)</service.init.version>

				<!-- Service init layout dependency. -->
                <service.template.groupId>com.carrotgarden.proc</service.template.groupId>
                <service.template.artifactId>carrot-proc-template</service.template.artifactId>
                <service.template.version>[0,)</service.template.version>

				<!-- Service template folder layout. -->
                <template.root.dir>${project.build.directory}/template</template.root.dir>
                <template.base.dir>${template.root.dir}/base</template.base.dir>
                <template.conf.dir>${template.root.dir}/conf</template.conf.dir>
                <template.init.dir>${template.root.dir}/init</template.init.dir>
                <template.logs.dir>${template.root.dir}/logs</template.logs.dir>
                <template.temp.dir>${template.root.dir}/temp</template.temp.dir>

				<!-- Control service during install. -->
                <manageService>no</manageService>

            </properties>

            <dependencies>
				<!-- Provide init jars. -->
                <dependency>
                    <groupId>${service.init.groupId}</groupId>
                    <artifactId>${service.init.artifactId}</artifactId>
                    <version>${service.init.version}</version>
                </dependency>
				<!-- Provide service layout. -->
                <dependency>
                    <groupId>${service.template.groupId}</groupId>
                    <artifactId>${service.template.artifactId}</artifactId>
                    <version>${service.template.version}</version>
                </dependency>
            </dependencies>

            <build>

                <plugins>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <configuration>
                            <includeScope>runtime</includeScope>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <overWriteReleases>true</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                        </configuration>
                        <executions>
							<!-- Unpack service template files. -->
                            <execution>
                                <id>service-unpack</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>unpack-dependencies</goal>
                                </goals>
                                <configuration>
                                    <excludes>META-INF/**</excludes>
                                    <outputDirectory>${template.root.dir}</outputDirectory>
                                    <includeArtifactIds>
                                        ${service.template.artifactId},
                                    </includeArtifactIds>
                                </configuration>
                            </execution>
							<!-- Create dependency path file. -->
                            <execution>
                                <id>service-dependency</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build-classpath</goal>
                                </goals>
                                <configuration>
                                    <outputFile>${service.init.deps}</outputFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
							<!-- Copy service template. -->
                            <execution>
                                <id>copy-all</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <filtering>false</filtering>
                                            <directory>${template.root.dir}</directory>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${service.root.dir}</outputDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-init</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <filtering>true</filtering><!-- yes -->
                                            <directory>${template.init.dir}</directory>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${service.init.dir}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
							<!-- Ensure user sudo rights. -->
                            <execution>
                                <id>service-validate</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${service.root.dir}</workingDirectory>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
                              sudo true
                              ]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
							<!-- Uninstall service before removal. -->
                            <execution>
                                <id>service-uninstall</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${service.init.dir}</workingDirectory>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
                        if [[ "${manageService}" == "yes" ]] ; then
                           if [[ -x "${service.exec.stop}" ]] ; then
                              "${service.exec.stop}"
                           else
                              echo "[WARN] Missing service stop script."
                              # continue
                           fi
                           if [[ -x "${service.exec.uninstall}" ]] ; then 
                              "${service.exec.uninstall}"
                           else 
                              echo "[WARN] Missing service uninstall script."
                              # continue
                           fi
                        fi
                        exit 0
                                ]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
							<!-- Ensure script permissions before install. -->
                            <execution>
                                <id>chmod-init</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${service.root.dir}</workingDirectory>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
                              find "${service.root.dir}"/ -type f -name '*.sh' | xargs -I @ chmod +x "@" 
                              ]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
							<!-- Install service after resources are ready. -->
                            <execution>
                                <id>service-install</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${service.init.dir}</workingDirectory>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
                        if [[ "${manageService}" == "yes" ]] ; then
                           if [[ -x "${service.exec.install}" ]] ; then 
                              "${service.exec.install}"
                           else 
                              echo "[WARN] Missing service install script."
                              exit 1
                           fi
                                       if [ -x "${service.exec.start}" ] ; then
                                           "${service.exec.start}"
                                          else 
                              echo "[WARN] Missing service start script."
                              exit 1
                                       fi
                        fi
                        exit 0
                                ]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-clean-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-clean</id>
                                <phase>disabled</phase>
                            </execution>
							<!-- Remove service resources. -->
                            <execution>
                                <id>service-uninstall</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>clean</goal>
                                </goals>
                                <configuration>
                                    <failOnError>false</failOnError>
                                    <filesets>
                                        <fileset>
                                            <directory>${service.root.dir}/</directory>
                                            <excludes>
												<!-- Service config. -->
                                                <path>pom.xml</path>
                                                <path>pom-*.md</path>
												<!-- Service control. -->
                                                <path>*.sh</path>
												<!-- Service development. -->
                                                <path>.project</path>
                                                <path>.settings</path>
                                            </excludes>
                                        </fileset>
                                    </filesets>
                                </configuration>
                            </execution>
							<!-- Remove maven build resources. -->
                            <execution>
                                <id>service-install</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>clean</goal>
                                </goals>
                                <configuration>
                                    <failOnError>false</failOnError>
                                    <filesets>
                                        <fileset>
                                            <directory>${project.build.directory}</directory>
                                        </fileset>
                                    </filesets>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Service is not for repository install. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-install-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
					<!-- Service is not for repository deploy. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>

                </plugins>

            </build>
        </profile>

		<!-- Skip project install/deploy. -->
        <profile>
            <id>no-repo</id>
            <activation>
                <file>
                    <exists>.mvn/pom-no-repo.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-install-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Skip project install. -->
        <profile>
            <id>no-install</id>
            <activation>
                <file>
                    <exists>.mvn/pom-no-install.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-install-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Skip project deploy. -->
        <profile>
            <id>no-deploy</id>
            <activation>
                <file>
                    <exists>.mvn/pom-no-deploy.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>com.carrotgarden.maven</groupId>
                        <artifactId>bintray-maven-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Skip integraton test invocaton. -->
        <profile>
            <id>no-invoke</id>
            <activation>
                <file>
                    <exists>.mvn/pom-no-invoke.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-invoker-plugin</artifactId>
                        <configuration>
                            <skipInvocation>true</skipInvocation>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Scala Protocol Buffers. -->
        <profile>
            <id>scala-protobuf</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scala-protobuf.md</exists>
                </file>
            </activation>
            <properties>
                <scalaPbProtoVersion>${version.protobuf}</scalaPbProtoVersion>
                <scalaPbMainSource>${basedir}/src/main/resources/protobuf</scalaPbMainSource>
                <scalaPbMainTarget>${basedir}/target/protobuf/main</scalaPbMainTarget>
                <scalaPbMainSourceFile>${scalaPbMainSource}/arkon.proto</scalaPbMainSourceFile>
            </properties>
            <build>
                <plugins>
					<!-- Profision folders -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>make-dirs</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <target>
                                        <mkdir dir="${scalaPbMainTarget}" />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Compile the proto file -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>com.trueaccord.scalapb</groupId>
                                <artifactId>scalapbc_${version.scala.epoch}</artifactId>
                                <version>${version.scala.protobuf}</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>proto-main</id>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <mainClass>com.trueaccord.scalapb.ScalaPBC</mainClass>
                                    <cleanupDaemonThreads>false</cleanupDaemonThreads>
                                    <includePluginDependencies>true</includePluginDependencies>
                                    <classpathScope>compile</classpathScope>
                                    <executableDependency>
                                        <groupId>com.trueaccord.scalapb</groupId>
                                        <artifactId>scalapbc_${version.scala.epoch}</artifactId>
                                    </executableDependency>
                                    <arguments>
                                        <argument>-v${scalaPbProtoVersion}</argument>
										<!-- otherwise scalapbc kills the VM -->
                                        <argument>--throw</argument>
                                        <argument>--proto_path=${scalaPbMainSource}</argument>
                                        <argument>--scala_out=${scalaPbMainTarget}</argument>
                                        <argument>${scalaPbMainSourceFile}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Use generated folder as a source -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${scalaPbMainTarget}</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>

		<!-- Create module package. -->
        <profile>
            <id>module-package</id>
            <activation>
                <file>
                    <exists>.mvn/pom-module-package.md</exists>
                </file>
            </activation>
            <properties>
				<!-- note: scope -->
                <packageFolder>${project.build.directory}/classes/LIB-DIR</packageFolder>
            </properties>
            <build>
                <plugins>
					<!-- Include dependency libraries into the module. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-jars</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>copy-dependencies</goal>
                                </goals>
                                <configuration>
                                    <overWriteIfNewer>true</overWriteIfNewer>
                                    <overWriteReleases>true</overWriteReleases>
                                    <overWriteSnapshots>true</overWriteSnapshots>
									<!-- runtime scope gives runtime and compile dependencies -->
                                    <includeScope>runtime</includeScope>
                                    <outputDirectory>${packageFolder}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Provide library identity check via checksums. -->
                    <plugin>
                        <groupId>net.nicoulaj.maven.plugins</groupId>
                        <artifactId>checksum-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>make-sums</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>dependencies</goal>
                                </goals>
                                <configuration>
                                    <algorithms>
                                        <algorithm>SHA-1</algorithm>
                                    </algorithms>
                                    <transitive>true</transitive>
                                    <individualFiles>true</individualFiles>
                                    <individualFilesOutputDirectory>${packageFolder}</individualFilesOutputDirectory>
                                    <scopes>
                                        <scope>compile</scope>
                                        <scope>runtime</scope>
                                    </scopes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Provide base shade properties for profiles: shade-config and shade-invoke -->
        <profile>
            <id>shade-arkon</id>
            <activation>
                <file>
                    <exists>.mvn/pom-shade.md</exists>
                </file>
            </activation>
            <properties>
				<!-- name space -->
                <shade.artifactId><![CDATA[${project.artifactId}]]></shade.artifactId>
                <shade.artifactTitle><![CDATA[${shade.artifactId}-${project.version}]]></shade.artifactTitle>
				<!-- origin code before shade / shade result before deploy -->
                <shade.deploy.library.jar><![CDATA[${project.build.directory}/${shade.artifactTitle}.jar]]></shade.deploy.library.jar>
                <shade.deploy.sources.jar><![CDATA[${project.build.directory}/${shade.artifactTitle}-sources.jar]]></shade.deploy.sources.jar>
				<!-- base code backup copy for review -->
                <shade.origin.library.jar><![CDATA[${project.build.directory}/${shade.artifactTitle}-origin.jar]]></shade.origin.library.jar>
                <shade.origin.sources.jar><![CDATA[${project.build.directory}/${shade.artifactTitle}-origin-sources.jar]]></shade.origin.sources.jar>
				<!-- base code transformed by the shade -->
                <shade.result.library.jar><![CDATA[${project.build.directory}/${shade.artifactTitle}-shaded.jar]]></shade.result.library.jar>
                <shade.result.sources.jar><![CDATA[${project.build.directory}/${shade.artifactTitle}-shaded-sources.jar]]></shade.result.sources.jar>
            </properties>
        </profile>

		<!-- Control shade plugin invocation. Note: forks shade invocation. -->
        <profile>
            <id>shade-config</id>
            <activation>
                <file>
                    <exists>.mvn/pom-shade.md</exists>
                </file>
                <property>
                    <name>!shade.invoke</name><!-- see profile:shade-invoke -->
                </property>
            </activation>
            <properties>
                <shade.maven.arguments><!-- Used to fork new maven instance. -->
					<!-- Note: override revision to ensure fork inherits the version. -->
                    <![CDATA[package --batch-mode --define shade.invoke --define skipTests --show-version --define revision=${project.version}]]>
                </shade.maven.arguments>
            </properties>
            <build>
                <plugins>
					<!-- Generate library jar. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                    </plugin>
					<!-- Generate sources jar. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>
					<!-- Invoke shade in separate maven instance. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>ant-contrib</groupId>
                                <artifactId>ant-contrib</artifactId>
                                <version>1.0b3</version>
                                <exclusions>
                                    <exclusion>
                                        <groupId>ant</groupId>
                                        <artifactId>ant</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>shade-config</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
									<!-- Invoke shade plugin only when no shading done yet. -->
                                    <target>
										<!-- ant fun: "if" -->
                                        <taskdef resource="net/sf/antcontrib/antlib.xml"
                                            classpathref="maven.plugin.classpath" />

                                        <property name="args" value="${shade.maven.arguments}" />
                                        <property name="target" value="${project.build.directory}" />

                                        <property name="pathResultLibrary" value="${shade.result.library.jar}" />
                                        <property name="pathResultSources" value="${shade.result.sources.jar}" />

                                        <property name="pathOriginLibrary" value="${shade.origin.library.jar}" />
                                        <property name="pathOriginSources" value="${shade.origin.sources.jar}" />

                                        <property name="pathDeployLibrary" value="${shade.deploy.library.jar}" />
                                        <property name="pathDeploySources" value="${shade.deploy.sources.jar}" />

                                        <available property="pathResultLibrary.is" file="${pathResultLibrary}" />
                                        <available property="pathResultSources.is" file="${pathResultSources}" />

                                        <echo
                                            message="pathResultLibrary=${pathResultLibrary} present=${pathResultLibrary.is}" />
                                        <echo
                                            message="pathResultSources=${pathResultSources} present=${pathResultSources.is}" />

                                        <if>
                                            <and>
                                                <equals arg1="${pathResultLibrary.is}" arg2="true" />
                                                <equals arg1="${pathResultSources.is}" arg2="true" />
                                            </and>
                                            <then>
                                                <echo
                                                    message="skip maven shade invocation and re-use present shade jar" />
                                            </then>
                                            <else>
                                                <echo message="cleanup target=${target}" />
                                                <delete>
                                                    <fileset dir="${target}" includes="**/*.*" />
                                                </delete>
                                                <echo message="invoke maven: ${args}" />
                                                <exec dir="${basedir}" executable="mvn">
                                                    <arg line="${args}" />
                                                </exec>
                                                <echo message="copy build result to origin" />
                                                <copy file="${pathDeployLibrary}" tofile="${pathOriginLibrary}"
                                                    verbose="true" overwrite="true" force="true" />
                                                <copy file="${pathDeploySources}" tofile="${pathOriginSources}"
                                                    verbose="true" overwrite="true" force="true" />
                                            </else>
                                        </if>

                                        <echo message="copy shade result to deploy" />
                                        <copy file="${pathResultLibrary}" tofile="${pathDeployLibrary}"
                                            verbose="true" overwrite="true" force="true" />
                                        <copy file="${pathResultSources}" tofile="${pathDeploySources}"
                                            verbose="true" overwrite="true" force="true" />

                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Perform shade plugin invocation. Note: runs in a forked maven instance. -->
        <profile>
            <id>shade-invoke</id>
            <activation>
                <file>
                    <exists>.mvn/pom-shade.md</exists>
                </file>
                <property>
                    <name>shade.invoke</name><!-- see profile:shade-config -->
                </property>
            </activation>
            <properties>
            </properties>
            <build>
                <plugins>
					<!-- Generate library jar. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-jar-plugin</artifactId>
                    </plugin>
					<!-- Generate sources jar. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>
					<!-- Invoke shade in current maven instance. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-shade-plugin</artifactId>
                        <configuration>
                            <createSourcesJar>true</createSourcesJar>
                            <shadeSourcesContent>true</shadeSourcesContent>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                        </configuration>
                        <executions>
                            <execution>
                                <id>shade-invoke</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>shade</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Activate git clone configuration. -->
        <profile>
            <id>git-clone</id>
            <activation>
                <file>
                    <exists>.mvn/pom-git-clone.md</exists>
                </file>
            </activation>
            <properties>
                <profileGitRepoLocal>${basedir}/repo</profileGitRepoLocal>
                <profileGitRepoRemote>scm:git:git@github.com:user/path.git</profileGitRepoRemote>
                <profileGitSourcePath>src/main/java</profileGitSourcePath>
                <profileGitResourcesPath>src/main/resources</profileGitResourcesPath>
                <profileGitVersionType>branch</profileGitVersionType>
                <profileGitVersionName>master</profileGitVersionName>
            </properties>
            <build>
				<!-- note: no "scm:update" in jgit, use gitexe instead -->
				<!-- http://maven.apache.org/scm/maven-scm-providers/maven-scm-providers-git/maven-scm-provider-jgit/ -->
				<!-- http://maven.apache.org/scm/maven-scm-providers/maven-scm-providers-git/maven-scm-provider-gitexe/index.html -->
                <plugins>
					<!-- Perform git clone. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-scm-plugin</artifactId>
                        <version>${version.maven.scm}</version>
                        <configuration>
                            <connectionUrl>${profileGitRepoRemote}</connectionUrl>
							<!-- <providerImplementations> -->
							<!-- <git>jgit</git> -->
							<!-- </providerImplementations> -->
                        </configuration>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.maven.scm</groupId>
                                <artifactId>maven-scm-provider-jgit</artifactId>
                                <version>${version.maven.scm}</version>
                            </dependency>
                        </dependencies>
                        <executions>
							<!-- Perform git clone if local is missing. -->
                            <execution>
                                <id>clone-missing</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>checkout</goal>
                                </goals>
                                <configuration>
                                    <checkoutDirectory>${profileGitRepoLocal}</checkoutDirectory>
                                    <skipCheckoutIfExists>true</skipCheckoutIfExists>
                                    <scmVersionType>branch</scmVersionType>
                                    <scmVersion>master</scmVersion>
                                </configuration>
                            </execution>
							<!-- Perform git pull always to required version. -->
                            <execution>
                                <id>pull-version</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>update</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${profileGitRepoLocal}</workingDirectory>
                                    <scmVersionType>${profileGitVersionType}</scmVersionType>
                                    <scmVersion>${profileGitVersionName}</scmVersion>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Attach cloned sources and resources. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>add-source</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${profileGitRepoLocal}/${profileGitSourcePath}</source>
                                    </sources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>add-resource</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>add-resource</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${profileGitRepoLocal}/${profileGitResourcesPath}</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>repo-typesafe-snapshots</id>
            <activation>
                <file>
                    <exists>.mvn/pom-repo-typesafe-snapshots.md</exists>
                </file>
            </activation>
            <properties>
                <typesafeSnapshotRepo>http://repo.typesafe.com/typesafe/snapshots/</typesafeSnapshotRepo>
            </properties>
            <repositories>
                <repository>
                    <id>typesafe-snapshots</id>
                    <url>${typesafeSnapshotRepo}</url>
                    <releases>
                        <enabled>false</enabled>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                    </snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>typesafe-snapshots</id>
                    <url>${typesafeSnapshotRepo}</url>
                    <releases>
                        <enabled>false</enabled>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>

        <profile>
            <id>repo-typesafe-releases</id>
            <activation>
                <file>
                    <exists>.mvn/pom-repo-typesafe-releases.md</exists>
                </file>
            </activation>
            <properties>
                <typesafeReleaseRepo>http://repo.typesafe.com/typesafe/releases/</typesafeReleaseRepo>
            </properties>
            <repositories>
                <repository>
                    <id>typesafe-releases</id>
                    <url>${typesafeReleaseRepo}</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>typesafe-releases</id>
                    <url>${typesafeReleaseRepo}</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>

        <profile>
            <id>play</id>
            <activation>
                <file>
                    <exists>.mvn/pom-play.md</exists>
                </file>
            </activation>
            <properties>
				<!-- See sbt-plugin/PlaySettings.scala -->
				<!-- src/main/scala -->
                <playAppFolder>app</playAppFolder>
				<!-- src/test/scala -->
                <playTestFolder>test</playTestFolder>
				<!-- src/main/resources -->
                <playConfFolder>conf</playConfFolder>
				<!-- src/main/resources/public -->
                <playAssetsFolder>public</playAssetsFolder>
				<!-- src/test/resources -->
                <playReferenceFolder>reference</playReferenceFolder>
            </properties>
            <build>
                <plugins>
					<!-- Play project layout. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>source-app</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${basedir}/${playAppFolder}</source>
                                    </sources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>source-test</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>add-test-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${basedir}/${playTestFolder}</source>
                                    </sources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>resource-main</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>add-resource</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${basedir}/${playConfFolder}</directory>
                                            <targetPath>.</targetPath>
                                        </resource>
                                        <resource>
                                            <directory>${basedir}/${playAssetsFolder}</directory>
                                            <targetPath>${playAssetsFolder}</targetPath>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>resource-test</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>add-test-resource</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${basedir}/${playReferenceFolder}</directory>
                                            <targetPath>.</targetPath>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Play resoures processing. -->
                    <plugin>
                        <groupId>com.google.code.play2-maven-plugin</groupId>
                        <artifactId>play2-maven-plugin</artifactId>
                        <version>1.0.0-beta5</version>
						<!-- Use explicit goals. -->
                        <extensions>false</extensions>
                        <configuration>
                            <mainLang>scala</mainLang>
                            <sbtVersion>${version.scala.sbt}</sbtVersion>
                            <playVersion>${version.play}</playVersion>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>routes-compile</goal>
                                    <goal>template-compile</goal>
									<!-- <goal>enhance</goal> -->
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Disable default compile plugin. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <skipMain>true</skipMain>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
					<!-- Enable custom java/scala compile plugin. -->
                    <plugin>
                        <groupId>com.google.code.sbt-compiler-maven-plugin</groupId>
                        <artifactId>sbt-compiler-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-sbt-process</id>
                                <goals>
                                    <goal>addScalaSources</goal>
                                    <goal>compile</goal>
                                    <goal>testCompile</goal>
                                </goals>
                                <configuration>
                                    <sbtVersion>${version.scala.sbt}</sbtVersion>
                                    <playVersion>${version.play}</playVersion>
                                    <scalaVersion>${version.scala.release}</scalaVersion>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Generate java code via xml transform. -->
        <profile>
            <id>xform</id>
            <activation>
                <file>
                    <exists>.mvn/pom-xform.md</exists>
                </file>
            </activation>
            <properties>
				<!-- Xform main root. -->
                <xformMain>${basedir}/src/main/resources/xform</xformMain>
				<!-- Xform test root. -->
                <xformTest>${basedir}/src/test/resources/xform</xformTest>
				<!-- XML source files. -->
                <xformMainDocDir>${xformMain}/document</xformMainDocDir>
				<!-- XSD schema catalog. -->
                <xformMainCatalog>${xformMain}/catalog/catalog.xml</xformMainCatalog>
				<!-- XSD validation schema. -->
                <xformMainSchema>${xformMain}/template/archon.xsd</xformMainSchema>
				<!-- XSL transformation template. -->
                <xformMainTemplate>${xformMain}/template/archon.xsl</xformMainTemplate>
				<!-- Java generated source files. -->
                <xformMainGenerated>${basedir}/target/xform/main</xformMainGenerated>
				<!-- XML source files. -->
                <xformTestDocDir>${xformTest}/document</xformTestDocDir>
				<!-- XSD schema catalog. -->
                <xformTestCatalog>${xformTest}/catalog/catalog.xml</xformTestCatalog>
				<!-- XSD validation schema. -->
                <xformTestSchema>${xformTest}/template/archon.xsd</xformTestSchema>
				<!-- XSL transformation template. -->
                <xformTestTemplate>${xformTest}/template/archon.xsl</xformTestTemplate>
				<!-- Java generated source files. -->
                <xformTestGenerated>${basedir}/target/xform/test</xformTestGenerated>
				<!-- Name of XSL tempalte parameter for java source output folder. -->
                <xformParamCodeRoot>param-folder</xformParamCodeRoot>
            </properties>
            <build>
                <plugins>
					<!-- Activate XInclude support from Xerces . -->
                    <plugin>
                        <groupId>org.kuali.maven.plugins</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>properties</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>set-system-properties</goal>
                                </goals>
                                <configuration>
                                    <properties>
                                        <property>
											<!-- Use JDK parser. -->
                                            <name>org.xml.sax.driver</name>
                                            <value>com.sun.org.apache.xerces.internal.parsers.SAXParser</value>
                                        </property>
                                        <property>
											<!-- Required for xml:include to work. -->
                                            <name>org.apache.xerces.xni.parser.XMLParserConfiguration</name>
                                            <value>org.apache.xerces.parsers.XIncludeParserConfiguration</value>
                                        </property>
                                    </properties>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Apply schema validate and code generation transform. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>xml-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>process-main</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>validate</goal>
                                    <goal>transform</goal>
                                </goals>
                                <configuration>
                                    <forceCreation>true</forceCreation>
                                    <catalogs>
                                        <catalog>${xformMainCatalog}</catalog>
                                    </catalogs>
                                    <validationSets>
                                        <validationSet>
                                            <dir>${xformMainDocDir}</dir>
                                            <systemId>${xformMainSchema}</systemId>
                                        </validationSet>
                                    </validationSets>
                                    <transformationSets>
                                        <transformationSet>
                                            <dir>${xformMainDocDir}</dir>
                                            <stylesheet>${xformMainTemplate}</stylesheet>
                                            <parameters>
                                                <parameter>
                                                    <name>${xformParamCodeRoot}</name>
                                                    <value>${xformMainGenerated}</value>
                                                </parameter>
                                            </parameters>
                                        </transformationSet>
                                    </transformationSets>
                                </configuration>
                            </execution>
                            <execution>
                                <id>process-test</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>validate</goal>
                                    <goal>transform</goal>
                                </goals>
                                <configuration>
                                    <forceCreation>true</forceCreation>
                                    <catalogs>
                                        <catalog>${xformTestCatalog}</catalog>
                                    </catalogs>
                                    <validationSets>
                                        <validationSet>
                                            <dir>${xformTestDocDir}</dir>
                                            <systemId>${xformTestSchema}</systemId>
                                        </validationSet>
                                    </validationSets>
                                    <transformationSets>
                                        <transformationSet>
                                            <dir>${xformTestDocDir}</dir>
                                            <stylesheet>${xformTestTemplate}</stylesheet>
                                            <parameters>
                                                <parameter>
                                                    <name>${xformParamCodeRoot}</name>
                                                    <value>${xformTestGenerated}</value>
                                                </parameter>
                                            </parameters>
                                        </transformationSet>
                                    </transformationSets>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Format generated java source. -->
                    <plugin>
                        <groupId>com.googlecode.maven-java-formatter-plugin</groupId>
                        <artifactId>maven-java-formatter-plugin</artifactId>
                        <version>0.4</version>
                        <configuration>
                            <compilerSource>${version.java}</compilerSource>
                            <compilerCompliance>${version.java}</compilerCompliance>
                            <compilerTargetPlatform>${version.java}</compilerTargetPlatform>
                        </configuration>
                        <executions>
                            <execution>
                                <id>format-main</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>format</goal>
                                </goals>
                                <configuration>
                                    <sourceDirectory>${xformMainGenerated}</sourceDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>format-test</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>format</goal>
                                </goals>
                                <configuration>
                                    <sourceDirectory>${xformTestGenerated}</sourceDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Attach generated java source to the build. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>add-main</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${xformMainGenerated}</source>
                                    </sources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>add-test</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>add-test-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${xformTestGenerated}</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Attach java source to the build. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Transform arkon for dependency resolution -->
        <profile>
            <id>xform-arkon</id>
            <activation>
                <file>
                    <exists>.mvn/pom-xform-arkon.md</exists>
                </file>
            </activation>
            <properties>
                <xformFile>pom.xml</xformFile><!-- Source file -->
                <xformCode>pom.xsl</xformCode><!-- Transform definition -->
                <xformSource>${basedir}</xformSource><!-- Folder of source file -->
                <xformTarget>${basedir}/target</xformTarget><!-- Folder of transform result -->
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>xml-maven-plugin</artifactId>
                        <configuration>
                            <transformationSets>
                                <transformationSet>
                                    <includes>${xformFile}</includes>
                                    <stylesheet>${xformCode}</stylesheet>
                                    <dir>${xformSource}</dir>
                                    <outputDir>${xformTarget}</outputDir>
                                </transformationSet>
                            </transformationSets>
                        </configuration>
                        <executions>
                            <execution>
                                <id>xform-arkon</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>transform</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Eclipse plugin development. -->
        <profile>
            <id>eclipse-2019-03</id>
            <activation>
                <file>
                    <exists>.mvn/pom-eclipse-2019-03.md</exists>
                </file>
            </activation>
            <properties>
                <eclipse.release.repo.url>http://download.eclipse.org/releases/2019-03/201903201000</eclipse.release.repo.url>
                <eclipse.tool.orbit.repo.url>http://download.eclipse.org/tools/orbit/downloads/drops/R20190226160451/repository/</eclipse.tool.orbit.repo.url>
            </properties>
        </profile>

		<!-- Eclipse plugin development. -->
        <profile>
            <id>eclipse</id>
            <activation>
                <file>
                    <exists>.mvn/pom-eclipse.md</exists>
                </file>
            </activation>
            <repositories>
                <repository>
                    <layout>p2</layout>
                    <id>eclipse-release</id>
                    <url>${eclipse.release.repo.url}</url>
                </repository>
                <repository>
                    <layout>p2</layout>
                    <id>eclipse-tool-orbit</id>
                    <url>${eclipse.tool.orbit.repo.url}</url>
                </repository>
            </repositories>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.eclipse.tycho</groupId>
                            <artifactId>target-platform-configuration</artifactId>
                            <version>${version.tycho}</version>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho</groupId>
                            <artifactId>tycho-compiler-plugin</artifactId>
                            <version>${version.tycho}</version>
                            <configuration>
                                <showWarnings>true</showWarnings>
                                <compilerArguments>
                                    <inlineJSR />
                                    <enableJavadoc />
                                    <encoding>${project.build.sourceEncoding}</encoding>
                                </compilerArguments>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho</groupId>
                            <artifactId>tycho-packaging-plugin</artifactId>
                            <version>${version.tycho}</version>
                            <dependencies>
                                <dependency>
                                    <groupId>org.eclipse.tycho.extras</groupId>
                                    <artifactId>tycho-buildtimestamp-jgit</artifactId>
                                    <version>${version.tycho}</version>
                                </dependency>
                            </dependencies>
                            <configuration>
                                <strictBinIncludes>false</strictBinIncludes>
                                <format>'v'yyyyMMdd-HHmm</format>
                                <timestampProvider>jgit</timestampProvider>
								<!--jgit.ignore>pom.xml</jgit.ignore -->
                                <jgit.dirtyWorkingTree>warning</jgit.dirtyWorkingTree>
								<!-- <jgit.dirtyWorkingTree>warning|error|ignore</jgit.dirtyWorkingTree> -->
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho</groupId>
                            <artifactId>tycho-surefire-plugin</artifactId>
                            <version>${version.tycho}</version>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho</groupId>
                            <artifactId>tycho-source-plugin</artifactId>
                            <version>${version.tycho}</version>
                            <configuration>
                                <strictSrcIncludes>false</strictSrcIncludes>
                            </configuration>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho</groupId>
                            <artifactId>tycho-p2-director-plugin</artifactId>
                            <version>${version.tycho}</version>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho</groupId>
                            <artifactId>tycho-p2-repository-plugin</artifactId>
                            <version>${version.tycho}</version>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho.extras</groupId>
                            <artifactId>tycho-source-feature-plugin</artifactId>
                            <version>${version.tycho}</version>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho.extras</groupId>
                            <artifactId>tycho-custom-bundle-plugin</artifactId>
                            <version>${version.tycho}</version>
                        </plugin>
                        <plugin>
                            <groupId>org.eclipse.tycho</groupId>
                            <artifactId>tycho-p2-plugin</artifactId>
                            <version>${version.tycho}</version>
                            <configuration>
                                <baselineMode>warn</baselineMode>
                                <baselineReplace>none</baselineReplace>
								<!-- <baselineRepositories> -->
								<!-- <repository> -->
								<!-- <url>http://download.eclipse.org/e4/updates/0.15-I-builds</url> -->
								<!-- </repository> -->
								<!-- </baselineRepositories> -->
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.tycho</groupId>
                        <artifactId>tycho-maven-plugin</artifactId>
                        <version>${version.tycho}</version>
                        <extensions>true</extensions>
                    </plugin>
                    <plugin>
                        <groupId>org.eclipse.tycho</groupId>
                        <artifactId>target-platform-configuration</artifactId>
                        <configuration>
                            <environments>
                                <environment>
                                    <os>linux</os>
                                    <ws>gtk</ws>
                                    <arch>x86</arch>
                                </environment>
                                <environment>
                                    <os>linux</os>
                                    <ws>gtk</ws>
                                    <arch>x86_64</arch>
                                </environment>
                                <environment>
                                    <os>win32</os>
                                    <ws>win32</ws>
                                    <arch>x86</arch>
                                </environment>
                                <environment>
                                    <os>win32</os>
                                    <ws>win32</ws>
                                    <arch>x86_64</arch>
                                </environment>
                                <environment>
                                    <os>macosx</os>
                                    <ws>cocoa</ws>
                                    <arch>x86_64</arch>
                                </environment>
                            </environments>
                            <filters>
								<!-- work around Equinox bug 348045 -->
								<!-- <filter> -->
								<!-- <type>p2-installable-unit</type> -->
								<!-- <id>org.eclipse.equinox.servletbridge.extensionbundle</id> -->
								<!-- <removeAll /> -->
								<!-- </filter> -->
                            </filters>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.eclipse.tycho</groupId>
                        <artifactId>tycho-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>plugin-source</id>
                                <goals>
                                    <goal>plugin-source</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Report dependency tree. -->
        <profile>
            <id>dependency-tree</id>
            <activation>
                <file>
                    <exists>.mvn/pom-dependency-tree.md</exists>
                </file>
            </activation>
            <properties>
                <dependencyFile>${basedir}/target/dependency-tree.txt</dependencyFile>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <configuration>
                            <includeScope>runtime</includeScope>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <overWriteReleases>true</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                        </configuration>
                        <executions>
							<!-- Create dependency tree file. -->
                            <execution>
                                <id>dependency-tree</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>tree</goal>
                                </goals>
                                <configuration>
                                    <outputFile>${dependencyFile}</outputFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Activate Integration Tests. -->
        <profile>
            <id>verify</id>
            <activation>
                <file>
                    <exists>.mvn/pom-verify.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Invoke Java Microbenchmark Harness. -->
        <profile>
            <id>jmh</id>
            <activation>
                <file>
                    <exists>.mvn/pom-jmh.md</exists>
                </file>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.openjdk.jmh</groupId>
                    <artifactId>jmh-core</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>org.openjdk.jmh</groupId>
                    <artifactId>jmh-generator-bytecode</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
					<!-- Generate JMH bench classes from annotations. -->
					<!-- <plugin> -->
					<!-- <groupId>com.carrotgarden.maven</groupId> -->
					<!-- <artifactId>carrot-maven-jmh-plugin</artifactId> -->
					<!-- <executions> -->
					<!-- <execution> -->
					<!-- <id>process</id> -->
					<!-- <goals> -->
					<!-- <goal>add-main</goal> -->
					<!-- <goal>generate-main</goal> -->
					<!-- <goal>compile-main</goal> -->
					<!-- <goal>add-test</goal> -->
					<!-- <goal>generate-test</goal> -->
					<!-- <goal>compile-test</goal> -->
					<!-- </goals> -->
					<!-- </execution> -->
					<!-- </executions> -->
					<!-- </plugin> -->
                </plugins>
            </build>
        </profile>

		<!-- Generate Scala classes from Protobuf templates. -->
        <profile>
            <id>scalabuff</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scalabuff.md</exists>
                </file>
            </activation>
            <properties>
				<!-- Location of *.proto files. -->
                <scalabuffMainInputFolder>${basedir}/src/main/resources/protobuf</scalabuffMainInputFolder>
				<!-- Location of generated *.scala files. -->
                <scalabuffMainOutputFolder>${basedir}/target/protobuf/main</scalabuffMainOutputFolder>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>make-folder</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <target>
                                        <mkdir dir="${scalabuffMainOutputFolder}" />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>generate-scala</id>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <mainClass>net.sandrogrzicic.scalabuff.compiler.ScalaBuff</mainClass>
                                    <includePluginDependencies>true</includePluginDependencies>
                                    <executableDependency>
                                        <groupId>net.sandrogrzicic</groupId>
                                        <artifactId>scalabuff-compiler_${version.scala.epoch}</artifactId>
                                    </executableDependency>
                                    <arguments>
                                        <argument>--proto_path=${scalabuffMainInputFolder}</argument>
                                        <argument>--scala_out=${scalabuffMainOutputFolder}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>net.sandrogrzicic</groupId>
                                <artifactId>scalabuff-compiler_${version.scala.epoch}</artifactId>
                                <version>${version.scala.buff}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Generate Java classes form SBE templeates. -->
        <profile>
            <id>sbe</id>
            <activation>
                <file>
                    <exists>.mvn/pom-sbe.md</exists>
                </file>
            </activation>
            <properties>
				<!-- -->
                <sbeMainSource>${basedir}/src/main/resources/sbe</sbeMainSource>
                <sbeMainTarget>${basedir}/target/sbe/main</sbeMainTarget>
                <sbeMainSourceFile>${sbeMainSource}/schema.xml</sbeMainSourceFile>
				<!-- -->
                <sbeTestSource>${basedir}/src/test/resources/sbe</sbeTestSource>
                <sbeTestTarget>${basedir}/target/sbe/test</sbeTestTarget>
                <sbeTestSourceFile>${sbeTestSource}/schema-test.xml</sbeTestSourceFile>
            </properties>
            <build>
                <plugins>
					<!-- Generate sources. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>uk.co.real-logic</groupId>
                                <artifactId>sbe-tool</artifactId>
                                <version>${version.sbe}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <includePluginDependencies>true</includePluginDependencies>
                            <includeProjectDependencies>false</includeProjectDependencies>
                            <executableDependency>
                                <groupId>uk.co.real-logic</groupId>
                                <artifactId>sbe-tool</artifactId>
                            </executableDependency>
                        </configuration>
						<!-- https://github.com/real-logic/simple-binary-encoding/wiki/Sbe-Tool-Guide -->
                        <executions>
                            <execution>
                                <id>make-main</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <configuration>
                                    <classpathScope>compile</classpathScope>
                                    <systemProperties>
                                        <systemProperty>
                                            <key>sbe.output.dir</key>
                                            <value>${sbeMainTarget}</value>
                                        </systemProperty>
                                        <systemProperty>
                                            <key>sbe.keyword.append.token</key>
                                            <value>_</value>
                                        </systemProperty>
                                    </systemProperties>
                                    <mainClass>uk.co.real_logic.sbe.SbeTool</mainClass>
                                    <commandlineArgs>${sbeMainSourceFile}</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>make-test</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <configuration>
                                    <classpathScope>compile</classpathScope>
                                    <systemProperties>
                                        <systemProperty>
                                            <key>sbe.output.dir</key>
                                            <value>${sbeTestTarget}</value>
                                        </systemProperty>
                                    </systemProperties>
                                    <mainClass>uk.co.real_logic.sbe.SbeTool</mainClass>
                                    <commandlineArgs>${sbeTestSourceFile}</commandlineArgs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Include sources -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>link-main</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${sbeMainTarget}</source>
                                    </sources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>link-test</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>add-test-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${sbeTestTarget}</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Generate Java classes form Flat Buffers templeates. -->
        <profile>
            <id>flatbuf</id>
            <activation>
                <file>
                    <exists>.mvn/pom-flatbuf.md</exists>
                </file>
            </activation>
            <properties>
                <flatbufMainSource>${basedir}/src/main/resources/flatbuf</flatbufMainSource>
                <flatbufMainTarget>${basedir}/target/flat/main/</flatbufMainTarget>
                <flatbufTestSource>${basedir}/src/test/resources/flatbuf</flatbufTestSource>
                <flatbufTestTarget>${basedir}/target/flat/test/</flatbufTestTarget>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>flat-main</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${basedir}</workingDirectory>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
                                 mkdir -p ${flatbufMainTarget}
                                 flatc -j -o ${flatbufMainTarget} ${flatbufMainSource}/*.fbs
                              ]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>flat-test</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <workingDirectory>${basedir}</workingDirectory>
                                    <executable>bash</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument><![CDATA[
                                 mkdir -p ${flatbufTestTarget}
                                 flatc -j -o ${flatbufTestTarget} ${flatbufTestSource}/*.fbs
                              ]]></argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>flat-main</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>add-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${flatbufMainTarget}</source>
                                    </sources>
                                </configuration>
                            </execution>
                            <execution>
                                <id>flat-test</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>add-test-source</goal>
                                </goals>
                                <configuration>
                                    <sources>
                                        <source>${flatbufTestTarget}</source>
                                    </sources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Generate Java classes form Protocol Buffers templeates. -->
        <profile>
            <id>protobuf</id>
            <activation>
                <file>
                    <exists>.mvn/pom-protobuf.md</exists>
                </file>
            </activation>
            <properties>
				<!-- Location of *.proto files. -->
                <protobufMainInputFolder>${basedir}/src/main/resources/protobuf</protobufMainInputFolder>
                <protobufTestInputFolder>${basedir}/src/test/resources/protobuf</protobufTestInputFolder>
				<!-- Location of generated *.java files. -->
                <protobufMainOutputFolder>${basedir}/target/protobuf/main</protobufMainOutputFolder>
                <protobufTestOutputFolder>${basedir}/target/protobuf/test</protobufTestOutputFolder>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>com.google.protobuf</groupId>
                    <artifactId>protobuf-java</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
					<!-- Generate java source from *.proto files. -->
                    <plugin>
                        <groupId>com.github.igor-petruk.protobuf</groupId>
                        <artifactId>protobuf-maven-plugin</artifactId>
                        <configuration>
							<!-- Prevent build loop in eclipse. -->
                            <cleanOutputFolder>false</cleanOutputFolder>
                        </configuration>
                        <executions>
							<!-- Generate main sources. -->
                            <execution>
                                <id>protocol-main-sources</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <includeDirectories>
                                        <entry>${protobufMainInputFolder}</entry>
                                    </includeDirectories>
                                    <inputDirectories>
                                        <entry>${protobufMainInputFolder}</entry>
                                    </inputDirectories>
                                    <outputDirectory>${protobufMainOutputFolder}</outputDirectory>
                                </configuration>
                            </execution>
							<!-- Generate test sources. -->
                            <execution>
                                <id>protocol-test-sources</id>
                                <phase>generate-test-sources</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <includeDirectories>
                                        <entry>${protobufTestInputFolder}</entry>
                                    </includeDirectories>
                                    <inputDirectories>
                                        <entry>${protobufTestInputFolder}</entry>
                                    </inputDirectories>
                                    <outputDirectory>${protobufTestOutputFolder}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Activate combined Java + Scala Project. -->
        <profile>
            <id>java-scala</id>
            <activation>
                <file>
                    <exists>.mvn/pom-java-scala.md</exists>
                </file>
            </activation>
            <properties>
                <scala.compiler.additionalParams><![CDATA[-Xsource:${version.scala.epoch}]]></scala.compiler.additionalParams>
            </properties>
            <build>
                <plugins>

					<!-- <plugin> -->
					<!-- <groupId>org.scalastyle</groupId> -->
					<!-- <artifactId>scalastyle-maven-plugin</artifactId> -->
					<!-- <configuration> -->
					<!-- <verbose>false</verbose> -->
					<!-- <failOnWarning>false</failOnWarning> -->
					<!-- <failOnViolation>true</failOnViolation> -->
					<!-- <includeTestSourceDirectory>true</includeTestSourceDirectory> -->
					<!-- <configLocation>${basedir}/lib/scalastyle_config.xml</configLocation> -->
					<!-- <sourceDirectory>${basedir}/src/main/scala</sourceDirectory> -->
					<!-- <testSourceDirectory>${basedir}/src/test/scala</testSourceDirectory> -->
					<!-- </configuration> -->
					<!-- <executions> -->
					<!-- <execution> -->
					<!-- <goals> -->
					<!-- <goal>check</goal> -->
					<!-- </goals> -->
					<!-- </execution> -->
					<!-- </executions> -->
					<!-- </plugin> -->

					<!-- Compile none of Java. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <skipMain>true</skipMain>
                            <skip>true</skip>
                        </configuration>
                    </plugin>

					<!-- Process scalac args. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>format-params</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>regex-property</goal>
                                </goals>
                                <configuration>
                                    <failIfNoMatch>false</failIfNoMatch>
                                    <name>scala.compiler.maven.args</name>
                                    <value>${scala.compiler.additionalParams}</value>
                                    <regex><![CDATA[\s+]]></regex>
                                    <replacement><![CDATA[|]]></replacement>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Compile Scala with Java dependencies. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-toolchains-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>net.alchim31.maven</groupId>
                        <artifactId>scala-maven-plugin</artifactId>
                        <configuration>
                            <scalaVersion>${version.scala.release}</scalaVersion>
                            <scalaCompatVersion>${version.scala.epoch}</scalaCompatVersion>
                            <compileOrder>JavaThenScala</compileOrder>
                            <useZincServer>true</useZincServer>
                            <recompileMode>incremental</recompileMode>
                            <addZincArgs>-no-color|-fork-java</addZincArgs>
                            <addScalacArgs>-deprecation|-feature|</addScalacArgs>
                            <keepGeneratedScript>true</keepGeneratedScript>
                            <displayCmd>true</displayCmd>
                            <fork>false</fork>
                            <failOnMultipleScalaVersions>true</failOnMultipleScalaVersions>
                            <addScalacArgs>${scala.compiler.maven.args}</addScalacArgs>
                            <jvmArgs>
                                <jvmArg>-client</jvmArg>
                                <jvmArg>-Xms1024m</jvmArg>
                                <jvmArg>-Xmx1024m</jvmArg>
                                <jvmArg>-Xss1M</jvmArg>
                            </jvmArgs>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>add-source</goal>
                                    <goal>compile</goal>
                                    <goal>testCompile</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Activate combined Java + Scala Project. -->
        <profile>
            <id>java-scala-eclipse</id>
            <activation>
				<!-- User activation. -->
                <file>
                    <exists>.mvn/pom-java-scala.md</exists>
                </file>
				<!-- Eclipse detection. -->
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <properties>
                <scala.eclipse.project>${project.basedir}/.project</scala.eclipse.project>
                <scala.eclipse.settings>${project.basedir}/.settings</scala.eclipse.settings>
                <scala.eclipse.properties>${scala.eclipse.settings}/org.scala-ide.sdt.core.prefs</scala.eclipse.properties>
            </properties>
            <build>
                <plugins>
					<!-- Configure Scala compiler in Ecipse. -->
					<!-- https://github.com/scala/scala/blob/2.12.x/src/compiler/scala/tools/nsc/settings/ScalaSettings.scala -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>eclipse-scala</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <mkdir dir="${scala.eclipse.settings}" />
                                        <propertyfile file="${scala.eclipse.properties}"
                                            comment="Maven Config: Scala" jdkproperties="true">
                                            <entry key="eclipse.preferences.version" value="1" />
                                            <entry key="target" value="jvm-${version.java}" />
                                            <entry key="scala.compiler.useProjectSettings" value="true" />
                                            <entry key="scala.compiler.sourceLevel" value="${version.scala.epoch}" />
											<!-- <entry key="scala.compiler.installation" value="${version.scala.eclipse}" /> -->
                                            <entry key="scala.compiler.additionalParams"
                                                value="${scala.compiler.additionalParams}" />
                                        </propertyfile>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Activate Scala.js Library Project: produce sjsir classes. -->
        <profile>
            <id>scala-js-lib</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scala-js-lib.md</exists>
                </file>
            </activation>
            <properties>
				<!-- Scala.js compiler plugin identification. -->
                <sjs.plugin.groupId>org.scala-js</sjs.plugin.groupId>
                <sjs.plugin.artifactId>scalajs-compiler_${version.scala.release}</sjs.plugin.artifactId>
                <sjs.plugin.version>${version.scalajs.release}</sjs.plugin.version>
                <scala.compiler.additionalParams><![CDATA[-Xsource:${version.scala.epoch} -P:scalajs:sjsDefinedByDefault]]></scala.compiler.additionalParams>
            </properties>
            <build>
                <plugins>

					<!-- Compile none of Java. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <skipMain>true</skipMain>
                            <skip>true</skip>
                        </configuration>
                    </plugin>

					<!-- Compile Scala into JS. -->
                    <plugin>
                        <groupId>net.alchim31.maven</groupId>
                        <artifactId>scala-maven-plugin</artifactId>
                        <configuration>
                            <compilerPlugins>
                                <compilerPlugin>
                                    <groupId>${sjs.plugin.groupId}</groupId>
                                    <artifactId>${sjs.plugin.artifactId}</artifactId>
                                    <version>${sjs.plugin.version}</version>
                                </compilerPlugin>
                            </compilerPlugins>
                        </configuration>
                    </plugin>

                </plugins>
            </build>
        </profile>

		<!-- Activate Scala.js Library Project: produce sjsir classes. -->
        <profile>
            <id>scala-js-lib-eclipse</id>
            <activation>
				<!-- User activation. -->
                <file>
                    <exists>.mvn/pom-scala-js-lib.md</exists>
                </file>
				<!-- Eclipse detection. -->
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <properties>
				<!-- Scala.js compiler plugin Eclipse integration. -->
                <sjs.plugin.name>scalajs</sjs.plugin.name>
                <sjs.plugin.directory>${project.build.directory}/scala-plugin</sjs.plugin.directory>
            </properties>
            <build>
                <plugins>
					<!-- Provision Scala.js compiler plugin for Eclipse. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>plugin-scala-js</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>${sjs.plugin.groupId}</groupId>
                                            <artifactId>${sjs.plugin.artifactId}</artifactId>
                                            <version>${sjs.plugin.version}</version>
                                            <outputDirectory>${sjs.plugin.directory}</outputDirectory>
                                            <overWrite>false</overWrite>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
					<!-- Configure Scala.js compiler plugin in Eclipse. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>eclipse-scala-js</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <propertyfile file="${scala.eclipse.properties}"
                                            comment="Maven Config: Scala JS" jdkproperties="true">
                                            <entry key="Xpluginsdir" value="${sjs.plugin.directory}" />
                                            <entry key="Xplugin" value="" />
                                            <entry key="Xplugin-disable" value="" />
                                            <entry key="Xplugin-require" value="${sjs.plugin.name}" />
                                        </propertyfile>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Activate Scala.js Runtime Project: produce runtime.js. -->
        <profile>
            <id>scala-js-run</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scala-js-run.md</exists>
                </file>
            </activation>
			<!-- Scala.js sjsir libraries use scope=provided. -->
            <dependencies>
                <dependency>
                    <groupId>org.scala-js</groupId>
                    <artifactId>scalajs-library_${version.scalajs.epoch}</artifactId>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
            <properties>
				<!-- -->
                <sjs.basedir>META-INF/resources/script</sjs.basedir><!-- Runtime folder in the jar. -->
                <sjs.runtime>runtime.js</sjs.runtime><!-- Generated runtime script name. -->
                <sjs.rundeps>runtime.deps</sjs.rundeps><!-- Dependency report artifact list. -->
				<!-- -->
                <sjs.scope>provided</sjs.scope><!-- Scala.js sjsir jar dependency selection filter -->
                <sjs.phase>prepare-package</sjs.phase><!-- Linker invocation lifecycle stage. -->
                <sjs.target>${project.build.directory}/scala-js/${sjs.basedir}</sjs.target><!-- JS linker output folder. -->
				<!-- -->
                <sjs.main.classes>${project.build.directory}/classes</sjs.main.classes>
                <sjs.test.classes>${project.build.directory}/test-classes</sjs.test.classes>
                <sjs.test.classes></sjs.test.classes><!-- Needs per-project config. -->
				<!-- -->
                <sjs.arg.options><![CDATA[--debug --fastOpt --sourceMap --prettyPrint]]></sjs.arg.options>
                <sjs.arg.runtime><![CDATA[--output ${sjs.target}/${sjs.runtime}]]></sjs.arg.runtime>
                <sjs.arg.classpath><![CDATA[${sjs.main.classes} ${sjs.test.classes} ${sjs.dependency}]]></sjs.arg.classpath>
				<!-- -->
                <sjs.arguments><![CDATA[${sjs.arg.options} ${sjs.arg.runtime} ${sjs.arg.classpath}]]></sjs.arguments>
            </properties>
            <build>
                <plugins>

					<!-- Provide Scala.js build folder. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>make-build-dir</id>
                                <phase>${sjs.phase}</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <mkdir dir="${sjs.target}" />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Provide JS dependency class path. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
							<!-- Inject as project property. -->
                            <execution>
                                <id>inject-classpath</id>
                                <phase>${sjs.phase}</phase>
                                <goals>
                                    <goal>build-classpath</goal>
                                </goals>
                                <configuration>
                                    <includeScope>${sjs.scope}</includeScope>
                                    <outputProperty>sjs.dependency</outputProperty>
                                </configuration>
                            </execution>
							<!-- Report to include in the jar. -->
                            <execution>
                                <id>output-classpath</id>
                                <phase>${sjs.phase}</phase>
                                <goals>
                                    <goal>list</goal>
                                </goals>
                                <configuration>
                                    <sort>true</sort>
                                    <includeScope>${sjs.scope}</includeScope>
                                    <outputFile>${sjs.target}/${sjs.rundeps}</outputFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Process dependency class path. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
							<!-- Convert to Scala.js linker format. -->
                            <execution>
                                <id>format-classpath</id>
                                <phase>${sjs.phase}</phase>
                                <goals>
                                    <goal>regex-property</goal>
                                </goals>
                                <configuration>
                                    <name>sjs.dependency</name>
                                    <value>${sjs.dependency}</value>
                                    <regex>${path.separator}</regex><!-- windows=';' unix=':' -->
                                    <failIfNoMatch>false</failIfNoMatch>
                                    <replacement xml:space="preserve"><![CDATA[ ]]></replacement>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Generate Scala.js runtime script. -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <dependencies>
							<!-- ensure scala version -->
                            <dependency>
                                <groupId>org.scala-lang</groupId>
                                <artifactId>scala-library</artifactId>
                                <version>${version.scala.release}</version>
                            </dependency>
							<!-- provide scala-js linker -->
                            <dependency>
                                <groupId>org.scala-js</groupId>
                                <artifactId>scalajs-cli_${version.scalajs.epoch}</artifactId>
                                <version>${version.scalajs.release}</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>make-runtime</id>
                                <phase>${sjs.phase}</phase>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <configuration>
                                    <cleanupDaemonThreads>false</cleanupDaemonThreads>
                                    <includePluginDependencies>true</includePluginDependencies>
                                    <includeProjectDependencies>false</includeProjectDependencies>
                                    <mainClass>org.scalajs.cli.Scalajsld</mainClass>
                                    <commandlineArgs>${sjs.arguments}</commandlineArgs>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Include generated runtime script in the jar. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-runtime</id>
                                <phase>${sjs.phase}</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${sjs.target}</directory>
                                            <filtering>false</filtering>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${sjs.main.classes}/${sjs.basedir}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>

		<!-- Suppress "Access Restriction" warnings. -->
        <profile>
            <id>ignore-symbol-file</id>
            <activation>
                <file>
                    <exists>.mvn/pom-ignore-symbol-file.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <compilerArgument>-XDignore.symbol.file</compilerArgument>
                        </configuration>
                    </plugin>
					<!-- <plugin> -->
					<!-- <groupId>net.alchim31.maven</groupId> -->
					<!-- <artifactId>scala-maven-plugin</artifactId> -->
					<!-- <configuration> -->
					<!-- <addJavacArgs>-XDignore.symbol.file|</addJavacArgs> -->
					<!-- </configuration> -->
					<!-- </plugin> -->
                </plugins>
            </build>
        </profile>

		<!-- Scala meta development. -->
        <profile>
            <id>scala-meta-paradise</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scala-meta-paradise.md</exists>
                </file>
            </activation>
            <properties>
				<!-- Scala/Meta compiler plugin identification. -->
                <meta.plugin.groupId>org.scalameta</meta.plugin.groupId>
                <meta.plugin.artifactId>paradise_${version.scala.release}</meta.plugin.artifactId>
                <meta.plugin.version>${version.scala.plugin.meta}</meta.plugin.version>
				<!-- Scala/Meta compiler plugin Eclipse integration. -->
                <meta.plugin.name>macroparadise</meta.plugin.name>
                <meta.plugin.directory>${project.build.directory}/scala-plugin</meta.plugin.directory>
                <meta.eclipse.project>${basedir}/.project</meta.eclipse.project>
                <meta.eclipse.settings>${basedir}/.settings</meta.eclipse.settings>
                <meta.eclipse.properties>${meta.eclipse.settings}/org.scala-ide.sdt.core.prefs</meta.eclipse.properties>
            </properties>
            <build>
                <plugins>
					<!-- Provision Scala/Meta compiler plugin for Eclipse. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>plugin-copy</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>${meta.plugin.groupId}</groupId>
                                            <artifactId>${meta.plugin.artifactId}</artifactId>
                                            <version>${meta.plugin.version}</version>
                                            <outputDirectory>${meta.plugin.directory}</outputDirectory>
                                            <overWrite>false</overWrite>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Configure Scala/Meta compiler plugin in Eclipse. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>eclipse-scala-meta</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <propertyfile file="${meta.eclipse.properties}"
                                            comment="Maven Config: Scala Meta">
                                            <entry key="eclipse.preferences.version" value="1" />
                                            <entry key="scala.compiler.useProjectSettings" value="true" />
                                            <entry key="Xpluginsdir" value="${meta.plugin.directory}" />
                                            <entry key="Xplugin" value="" />
                                            <entry key="Xplugin-disable" value="" />
                                            <entry key="Xplugin-require" value="${meta.plugin.name}" />
                                        </propertyfile>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Batch build. -->
                    <plugin>
                        <groupId>net.alchim31.maven</groupId>
                        <artifactId>scala-maven-plugin</artifactId>
                        <configuration>
                            <compilerPlugins>
                                <compilerPlugin>
                                    <groupId>${meta.plugin.groupId}</groupId>
                                    <artifactId>${meta.plugin.artifactId}</artifactId>
                                    <version>${meta.plugin.version}</version>
                                </compilerPlugin>
                            </compilerPlugins>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Scala macro development. -->
        <profile>
            <id>scala-macro-paradise</id>
            <activation>
                <file>
                    <exists>.mvn/pom-scala-macro-paradise.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>net.alchim31.maven</groupId>
                        <artifactId>scala-maven-plugin</artifactId>
                        <configuration>
                            <compilerPlugins>
                                <compilerPlugin>
                                    <groupId>org.scalamacros</groupId>
                                    <artifactId>paradise_${version.scala.release}</artifactId>
                                    <version>${version.scala.plugin.macro}</version>
                                </compilerPlugin>
                            </compilerPlugins>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Sing artifacts with GPG. -->
        <profile>
            <id>sign-artifacts</id>
            <activation>
                <file>
                    <exists>.mvn/pom-sign-artifacts.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
									<!-- GPG 2.0 options -->
                                    <gpgArguments>
                                        <arg>--pinentry-mode</arg>
                                        <arg>loopback</arg>
                                    </gpgArguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Attach sources for deployment. -->
        <profile>
            <id>attach-sources</id>
            <activation>
                <file>
                    <exists>.mvn/pom-attach-sources.md</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
								<!-- Provide custom execution id. -->
                                <id>attach-sources-no-fork</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Attach javadoc/scaladoc for deployment. -->
        <profile>
            <id>attach-javadoc</id>
            <activation>
                <file>
                    <exists>.mvn/pom-attach-javadoc.md</exists>
                </file>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-javadoc-plugin</artifactId>
                            <executions>
                                <execution>
									<!-- Override default execution id. -->
                                    <id>attach-javadoc</id>
                                    <phase>package</phase>
                                    <goals>
                                        <goal>jar</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                        <plugin>
                            <groupId>com.carrotgarden.maven</groupId>
                            <artifactId>scalor-maven-plugin_2.12</artifactId>
                            <executions>
                                <execution>
                                    <goals>
                                        <goal>scaladoc-macro</goal>
                                        <goal>scaladoc-main</goal>
                                    </goals>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

		<!-- Activated during release. See maven-release-plugin. -->
        <profile>
            <id>release</id>
            <activation>
                <property>
                    <name>performRelease</name>
                </property>
            </activation>
            <build>
                <plugins>

					<!-- Release must contain sources. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
								<!-- Provide custom execution id. -->
                                <id>attach-sources-no-fork</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Release must contain javadoc. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
								<!-- Override default execution id. -->
                                <id>attach-javadocs</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

					<!-- Release must be signed. -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>

		<!-- Public Carrot Garden distribution. -->
        <profile>
            <id>distro-public</id>
            <activation>
                <file>
                    <exists>.mvn/pom-distro-public.md</exists>
                </file>
            </activation>
            <distributionManagement>
                <repository>
                    <id>com.carrotgarden.maven.public.release</id>
                    <url>s3://${repo.amazon.public.host}/release</url>
                </repository>
                <snapshotRepository>
                    <id>com.carrotgarden.maven.public.staging</id>
                    <url>s3://${repo.amazon.public.host}/staging</url>
                </snapshotRepository>
            </distributionManagement>
        </profile>

		<!-- Secret Carrot Garden distribution. -->
        <profile>
            <id>distro-secret</id>
            <activation>
                <file>
                    <exists>.mvn/pom-distro-secret.md</exists>
                </file>
            </activation>
            <distributionManagement>
                <repository>
                    <id>com.carrotgarden.maven.secret.release</id>
                    <url>s3://${repo.amazon.secret.host}/release</url>
                </repository>
                <snapshotRepository>
                    <id>com.carrotgarden.maven.secret.staging</id>
                    <url>s3://${repo.amazon.secret.host}/staging</url>
                </snapshotRepository>
            </distributionManagement>
        </profile>

		<!-- Public Carrot Garden distribution. -->
        <profile>
            <id>distro-sonatype</id>
            <activation>
                <file>
                    <exists>.mvn/pom-distro-sonatype.md</exists>
                </file>
            </activation>
            <distributionManagement>
                <snapshotRepository>
                    <id>sonatype-snapshots</id>
                    <name>Sonatype Snapshots</name>
                    <url>${repo.sonatype.snapshots.url}</url>
                </snapshotRepository>
                <repository>
                    <id>sonatype-deployment</id>
                    <name>Sonatype Deployment</name>
                    <url>${repo.sonatype.deployment.url}</url>
                </repository>
            </distributionManagement>
        </profile>

		<!-- Public CarrotGarden snapshots. -->
        <profile>
            <id>repo-sonatype-snapshots</id>
            <activation>
                <file>
                    <exists>.mvn/pom-repo-sonatype-snapshots.md</exists>
                </file>
            </activation>
            <repositories>
                <repository>
                    <id>sonatype-snapshots</id>
                    <name>Sonatype Snapshots</name>
                    <url>${repo.sonatype.snapshots.url}</url>
                    <releases>
                        <enabled>false</enabled>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                    </snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>sonatype-snapshots</id>
                    <name>Sonatype Snapshots</name>
                    <url>${repo.sonatype.snapshots.url}</url>
                    <releases>
                        <enabled>false</enabled>
                    </releases>
                    <snapshots>
                        <enabled>true</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>

		<!-- Public CarrotGarden releases (before promotion to central). -->
        <profile>
            <id>repo-sonatype-releases</id>
            <activation>
                <file>
                    <exists>.mvn/pom-repo-sonatype-releases.md</exists>
                </file>
            </activation>
            <repositories>
                <repository>
                    <id>sonatype-releases</id>
                    <name>Sonatype Releases</name>
                    <url>${repo.sonatype.release.url}</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>sonatype-releases</id>
                    <name>Sonatype Releases</name>
                    <url>${repo.sonatype.release.url}</url>
                    <releases>
                        <enabled>true</enabled>
                    </releases>
                    <snapshots>
                        <enabled>false</enabled>
                    </snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>

		<!-- Jenkins build profile. -->
        <profile>
            <id>build-jenkins</id>
            <activation>
                <property>
                    <name>env.JENKINS_HOME</name>
                </property>
            </activation>
            <properties>
                <jenkins.manifest.testing.phase>process-classes</jenkins.manifest.testing.phase>
            </properties>
        </profile>

		<!-- License editor. -->
        <profile>
            <id>license</id>
            <properties>

                <licenseSource>src/license</licenseSource>
                <licenseTarget>target/license</licenseTarget>
                <licenseFile>license-osi-bsd.txt</licenseFile>

                <licenseYear>${project.inceptionYear}-${licence.year}</licenseYear>
                <licenseName>Andrei Pozolotin</licenseName>
                <licenseMail>Andrei.Pozolotin@gmail.com</licenseMail>

                <licenseGroupId>com.carrotgarden.base</licenseGroupId>
                <licenseArtifactId>carrot-archon-license</licenseArtifactId>
                <licenseVersion>RELEASE</licenseVersion>

            </properties>
            <build>
                <plugins>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>license-unpack</id>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>${licenseGroupId}</groupId>
                                            <artifactId>${licenseArtifactId}</artifactId>
                                            <version>${licenseVersion}</version>
                                            <type>jar</type>
                                        </artifactItem>
                                    </artifactItems>
                                    <outputDirectory>${licenseTarget}</outputDirectory>
                                    <overWriteIfNewer>true</overWriteIfNewer>
                                    <overWriteReleases>true</overWriteReleases>
                                    <overWriteSnapshots>true</overWriteSnapshots>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>com.mycila.maven-license-plugin</groupId>
                        <artifactId>maven-license-plugin</artifactId>
                        <configuration>
                            <header>${licenseTarget}/${licenseFile}</header>
                            <properties>
                                <year>${licenseYear}</year>
                                <name>${licenseName}</name>
                                <mail>${licenseMail}</mail>
                            </properties>
                            <strictCheck>true</strictCheck>
                            <useDefaultMapping>false</useDefaultMapping>
                            <useDefaultExcludes>false</useDefaultExcludes>
                            <mapping>
								<!-- custom -->
                                <md>XML_STYLE</md>
                                <ant>XML_STYLE</ant>
                                <scala>JAVADOC_STYLE</scala>
                                <gitignore>SCRIPT_STYLE</gitignore>
                                <component>SCRIPT_STYLE</component>
                                <conf>SCRIPT_STYLE</conf>
                                <cfg>SCRIPT_STYLE</cfg>
                                <properties>SCRIPT_STYLE</properties>
								<!-- default -->
                                <java>JAVADOC_STYLE</java>
                                <groovy>JAVADOC_STYLE</groovy>
                                <js>JAVADOC_STYLE</js>
                                <css>JAVADOC_STYLE</css>
                                <xml>XML_STYLE</xml>
                                <dtd>XML_STYLE</dtd>
                                <xsd>XML_STYLE</xsd>
                                <html>XML_STYLE</html>
                                <htm>XML_STYLE</htm>
                                <xsl>XML_STYLE</xsl>
                                <fml>XML_STYLE</fml>
                                <apt>DOUBLETILDE_STYLE</apt>
                                <properties>SCRIPT_STYLE</properties>
                                <sh>SCRIPT_STYLE</sh>
                                <txt>TEXT</txt>
                                <bat>BATCH</bat>
                                <cmd>BATCH</cmd>
                                <sql>DOUBLEDASHES_STYLE</sql>
                                <jsp>DYNASCRIPT_STYLE</jsp>
                                <ftl>FTL</ftl>
                                <xhtml>XML_STYLE</xhtml>
                                <vm>SHARPSTAR_STYLE</vm>
                                <jspx>XML_STYLE</jspx>
                            </mapping>
                            <includes>
                                <entry>**</entry>
                            </includes>
                            <excludes>
								<!-- custom -->
                                <entry>**/${licenseSource}/**</entry>
                                <entry>**/*.template</entry>
                                <entry>**/*.json</entry>
								<!-- // Miscellaneous typical temporary files -->
                                <entry>**/*~</entry>
                                <entry>**/#*#</entry>
                                <entry>**/.#*</entry>
                                <entry>**/%*%</entry>
                                <entry>**/._*</entry>
                                <entry>**/.repository/**</entry>
								<!-- // CVS -->
                                <entry>**/CVS</entry>
                                <entry>**/CVS/**</entry>
                                <entry>**/.cvsignore</entry>
								<!-- // RCS -->
                                <entry>**/RCS</entry>
                                <entry>**/RCS/**</entry>
								<!-- // SCCS -->
                                <entry>**/SCCS</entry>
                                <entry>**/SCCS/**</entry>
								<!-- // Visual SourceSafe -->
                                <entry>**/vssver.scc</entry>
								<!-- // Subversion -->
                                <entry>**/.svn</entry>
                                <entry>**/.svn/**</entry>
								<!-- // Arch -->
                                <entry>**/.arch-ids</entry>
                                <entry>**/.arch-ids/**</entry>
								<!-- // Bazaar -->
                                <entry>**/.bzr</entry>
                                <entry>**/.bzr/**</entry>
								<!-- // SurroundSCM -->
                                <entry>**/.MySCMServerInfo</entry>
								<!-- // Mac -->
                                <entry>**/.DS_Store</entry>
								<!-- // Serena Dimensions Version 10 -->
                                <entry>**/.metadata</entry>
                                <entry>**/.metadata/**</entry>
								<!-- // Mercurial -->
                                <entry>**/.hg</entry>
                                <entry>**/.hg/**</entry>
								<!-- // git -->
                                <entry>**/.git</entry>
                                <entry>**/.git/**</entry>
								<!-- // BitKeeper -->
                                <entry>**/BitKeeper</entry>
                                <entry>**/BitKeeper/**</entry>
                                <entry>**/ChangeSet</entry>
                                <entry>**/ChangeSet/**</entry>
								<!-- // darcs -->
                                <entry>**/_darcs</entry>
                                <entry>**/_darcs/**</entry>
                                <entry>**/.darcsrepo</entry>
                                <entry>**/.darcsrepo/**</entry>
                                <entry>**/-darcs-backup*</entry>
                                <entry>**/.darcs-temp-mail</entry>
								<!-- // maven project's temporary files -->
                                <entry>**/target/**</entry>
                                <entry>**/test-output/**</entry>
                                <entry>**/release.properties</entry>
                                <entry>**/pom.xml.*</entry>
                                <entry>**/dependency-reduced-pom.xml</entry>
								<!-- // code coverage tools -->
                                <entry>**/cobertura.ser</entry>
                                <entry>**/.clover/**</entry>
								<!-- // eclipse project files -->
                                <entry>**/.classpath</entry>
                                <entry>**/.project</entry>
                                <entry>**/.settings/**</entry>
								<!-- // IDEA projet files -->
                                <entry>**/*.iml</entry>
                                <entry>**/*.ipr</entry>
                                <entry>**/*.iws</entry>
								<!-- // descriptors -->
                                <entry>**/MANIFEST.MF</entry>
								<!-- // binary files - images -->
                                <entry>**/*.jpg</entry>
                                <entry>**/*.png</entry>
                                <entry>**/*.gif</entry>
                                <entry>**/*.ico</entry>
                                <entry>**/*.bmp</entry>
                                <entry>**/*.tiff</entry>
                                <entry>**/*.tif</entry>
                                <entry>**/*.cr2</entry>
                                <entry>**/*.xcf</entry>
								<!-- // binary files - programs -->
                                <entry>**/*.class</entry>
                                <entry>**/*.exe</entry>
                                <entry>**/*.bin</entry>
								<!-- // checksum files -->
                                <entry>**/*.md5</entry>
                                <entry>**/*.sha1</entry>
								<!-- // binary files - archives -->
                                <entry>**/*.jar</entry>
                                <entry>**/*.zip</entry>
                                <entry>**/*.rar</entry>
                                <entry>**/*.tar</entry>
                                <entry>**/*.tar.gz</entry>
                                <entry>**/*.tar.bz2</entry>
                                <entry>**/*.gz</entry>
								<!-- // binary files - documents -->
                                <entry>**/*.doc</entry>
                                <entry>**/*.xls</entry>
                                <entry>**/*.csv</entry>
                                <entry>**/*.pdf</entry>
                                <entry>**/*.odt</entry>
                                <entry>**/*.ods</entry>
                                <entry>**/*.odp</entry>
                                <entry>**/*.odb</entry>
                                <entry>**/*.odg</entry>
                                <entry>**/*.odf</entry>
                                <entry>**/*.mm</entry>
                                <entry>**/*.dia</entry>
                                <entry>**/*.log</entry>
								<!-- // ServiceLoader files -->
                                <entry>**/META-INF/services/**</entry>
                            </excludes>
                        </configuration>
                        <executions>
                            <execution>
                                <id>license-format</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>format</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>

    </profiles>

    <reporting>

		<!-- <plugins> -->

		<!-- <plugin> -->
		<!-- <groupId>org.apache.maven.plugins</groupId> -->
		<!-- <artifactId>maven-project-info-reports-plugin</artifactId> -->
		<!-- <version>2.9</version> -->
		<!-- </plugin> -->

		<!-- <plugin> -->
		<!-- <groupId>org.apache.maven.plugins</groupId> -->
		<!-- <artifactId>maven-jxr-plugin</artifactId> -->
		<!-- <version>2.5</version> -->
		<!-- </plugin> -->

		<!-- <plugin> -->
		<!-- <groupId>org.apache.maven.plugins</groupId> -->
		<!-- <artifactId>maven-javadoc-plugin</artifactId> -->
		<!-- <version>${version.maven.javadoc}</version> -->
		<!-- <configuration> -->
		<!-- <quiet>true</quiet> -->
		<!-- <show>protected</show> -->
		<!-- <linksource>true</linksource> -->
		<!-- <windowtitle><![CDATA[${project.artifactId}-${project.version} / ${projectTimeISO}]]></windowtitle> -->
		<!-- <doctitle><![CDATA[${project.artifactId}-${project.version} / ${projectTimeISO}]]></doctitle> -->
		<!-- <header><![CDATA[<a href="${project.url}" target="_blank">${project.artifactId}</a><br>${project.version} / ${projectTimeISO}]]></header> -->
		<!-- <footer><![CDATA[<a href="${project.url}" target="_blank">${project.artifactId}</a><br>${project.version} / ${projectTimeISO}]]></footer> -->
		<!-- <bottom><![CDATA[Copyright © {inceptionYear}-{currentYear} <a href="${project.organization.url}" target="_blank">${project.organization.name}</a>. 
			All Rights Reserved.]]></bottom> -->
		<!-- </configuration> -->
		<!-- </plugin> -->

		<!-- </plugins> -->

    </reporting>

</project>
